{"pageProps":{"url":"https://tarvk.github.io/projects/model-react","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(PageSummary, {\n    title: \"Model-react\",\n    content: mdx(CodeBlock, {\n      language: \"tsx\",\n      showHeader: false,\n      code: \"const SomeInput: FC<{field: Field<string>}> = ({field}) => {\\n    const [h] = useDataHook();\\n    return (\\n        <input\\n            type=\\\"text\\\"\\n            value={field.get(h)}\\n            onChange={e => field.set(e.target.value)}\\n        />\\n    );\\n};        \",\n      mdxType: \"CodeBlock\"\n    }),\n    tags: [\"React\", \"data-model\", \"data model\", \"data management\", \"reactive\", \"watchable\", \"subscribable\", \"subscribe\", \"state\", \"state management\"],\n    links: [{\n      type: \"github\",\n      url: \"https://github.com/TarVK/model-react\"\n    }, {\n      type: \"demo\",\n      url: \"https://tarvk.github.io/model-react/examples/build/\"\n    }],\n    mdxType: \"PageSummary\"\n  }, mdx(\"p\", null, \"A library to allow visualization of object oriented software, using React.\")), mdx(\"section\", {\n    \"name\": \"Model-react\",\n    \"depth\": 1\n  }, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Model-react\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Model react is a library that allows developers to create data models with observable properties without adding a lot of boilerplate. This way your data model can serve as an observable state to be visualized by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/\"\n  }, \"React\"), \". Many alternative state management libraries exist, usually following the same core principles as \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://redux.js.org/\"\n  }, \"Redux\"), \", but I was not sold on any of them.\\nI observed multiple issues with these libraries, and tried to resolve those with my own library. I don't claim that my library is better than others, since it has its own set of issues, but it does fit my own programming style better.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I've used model-react in many of my own projects, including \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/projects/launchmenu\"\n  }, \"LaunchMenu\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/projects/sweeper\"\n  }, \"Sweeper\"), \".\"), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Preview\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Preview\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Below is a preview of some simple application visualizing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" state. The premise of model-react is further explained in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#model-react-premise\"\n  }, \"premise section\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=demo.tsx\",\n    \"title\": \"demo.tsx\"\n  }, \"import {Field, useDataHook} from \\\"model-react\\\";\\nimport React from \\\"react\\\";\\nimport {render} from \\\"react-dom\\\";\\n\\nclass Person {\\n    constructor(name, age) {\\n        this.name = new Field(name);\\n        this.age = new Field(age);\\n    }\\n    setName(name) {\\n        this.name.set(name);\\n    }\\n    getName(h) {\\n        return this.name.get(h);\\n    }\\n    setAge(age) {\\n        this.age.set(age);\\n    }\\n    getAge(h) {\\n        return this.age.get(h);\\n    }\\n}\\n\\nconst PersonEditor = ({person}) => {\\n    const [h] = useDataHook();\\n    return (\\n        <div>\\n            <input\\n                value={person.getName(h)}\\n                onChange={e => person.setName(e.target.value)}\\n            />\\n            <input\\n                type=\\\"number\\\"\\n                value={person.getAge(h)}\\n                onChange={e => person.setAge(Number(e.target.value))}\\n            />\\n        </div>\\n    );\\n};\\n\\nconst PersonProfile = ({person}) => {\\n    const [h] = useDataHook();\\n    return (\\n        <div>\\n            Name: {person.getName(h)} <br />\\n            Age: {person.getAge(h)}\\n        </div>\\n    );\\n};\\n\\nconst john = new Person(\\\"John\\\", 1);\\nrender(\\n    <div>\\n        <PersonEditor person={john} />\\n        <PersonProfile person={john} />\\n    </div>,\\n    document.getElementById(\\\"root\\\")\\n);\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Below is a demo of what this code results in:\"), mdx(LaunchMenuModelReactDemo, {\n    mdxType: \"LaunchMenuModelReactDemo\"\n  })), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Why use a state manager?\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Why use a state manager?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"React comes with great tools for managing local state on a component level. However, when multiple components have to interact with each other and share state, it can quickly become difficult to manage this state. Such a state is usually called a \\\"global state\\\". React provides \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/context.html\"\n  }, \"contexts\"), \" that help spread state around in your application, but managing complex state can still be difficult. This is especially true when trying to combine different systems with React. One example of this is trying to synchronize React state with graphics made using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://threejs.org/\"\n  }, \"three.js\"), \" like I've done in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/projects/sweeper\"\n  }, \"Sweeper\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"State management libraries simply provide additional tools to help you manage such complex state. You don't strictly \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"need\"), \" to use such a library, but it can be a huge aid for bigger projects to keep everything managable and easy to understand.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Redux issues\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Redux issues\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Redux has several problems in my opinion, but most of these \\\"issues\\\" aren't objectively bad. As with many things in life, there are many trade-offs between different properties, and it just so happens that I value different things than the developers of redux did. Additionally you should take my complaints with a grain of salt, since I've not had extensive experience with Redux. I've used it for a couple of small projects, but due to never having been sold on it, I've tried to stay clear of it when possible.\"), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Forced programming style\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Forced programming style\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"JavaScript (or TypeScript) is a really flexible language in terms of the programming paradigms and styles it allows for. You can for instance program in a functional way (though lacking some more advanced functional programming features), in a procedural way, in an object oriented way, and so on. React largely follows this idea by providing a flexible core library (batteries excluded), rather than being a complete framework. It has some primitive constructs such as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render\"), \" function, the concepts of components and hooks, and the jsx syntax. Other than that, however, the way you structure your code and make use of react-elements is quite flexible once you understand how everything works. You usually end up combining React with a bunch of other tools and libraries in order to create your application. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/projects/launchmenu\"\n  }, \"LaunchMenu\"), \" provides a good example of React's flexibility. We ended up not relying on React's virtual-dom and life-cycle at all when structuring our application, but instead only used react to specify how to render the UI.\\nRedux as a state-management library on the other hand forces a certain style on its users. There's nothing inherently wrong with this, but if this isn't the style you're used to it may be difficult to work with at first. From what I observed, this style is one that many people are unfamiliar with, since it's more similar to functional programming than object oriented programming. Therefore I think this lock-in is particularlly cumbersome.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For the sake of fairness I should however mention that this lock-in to a certain style also allows redux users to easily add additional features to their codebase that are only possible due to the predictable nature of the code written with redux. One such feature is the ability to easily store local state through different sessions (sessions interupted by a page reload), since the state is fully serialisable. This is a good example of the trade-offs between different properties that I perviously mentioned.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Poor TypeScript support\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Poor TypeScript support\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Redux does have TypeScript support, but this seems to be more of an afterthought than a native feature. Because TypeScript has a very powerful typing system \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/microsoft/TypeScript/issues/14833\"\n  }, \"which is even Turing complete\"), \", they managed to make TypeScript work relatively well, but I still experienced some difficulties when using it. I sometimes had to add more typing information than I would like, and many of the built-in data types such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThunkAction\"), \" end up with many generic parameters.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Redux certainly is TypeScript compatible, and using it with TypeScript doesn't cause many issues, but I would argue it doesn't feel very smooth or well-integrated either.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Data transformations\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Data transformations\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Redux relies on users defining their own serialisable plain data format, as well as \\\"reducers\\\" that can modify this data based on a recieved action. This means that the data is completely serialisable and essentially plain JSON. However when you want to use the data in a React component, you can't simply read off the property from this plain JSON. If you did this, React would not be aware of when the data changed, and hence wouldn't rerender your element when needed.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To solve this, Redux makes use of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useSelector\"), \" hook. Usage can for instance look something like this:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=useSelectorUsage.tsx\",\n    \"title\": \"useSelectorUsage.tsx\"\n  }, \"const todo = useSelector(state => state.todos[props.id]);\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now it looks like you're still reading a value off of this pure JSON data, but in reality you are not. I don't know the exact implementation details, but you're most likely reading off of a proxy object, which will mirror the strucutre of your original data. This means that the hook can observe what data you exactly accessed, and can internally make sure it will start observing any changes to this data.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This works rather well, but I do consider this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Magic_(programming)\"\n  }, \"\\\"black magic\\\"\"), \". I generally am opposed to these types of things, since it reduces transparancy of how the software actually operates, which increases the chances of creating bugs. Once again there's a trade-off at play between transparancy and ease of use, but I am personally not a fan of how things work here. I think my main issue is that everything is presented as if it's very simple, while actually having many things going on behind the scenes.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Overwhelming\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Overwhelming\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The basic idea of Redux is pretty simple, and relatively nice in my opinion. You just have the concept of your plain JSON data, reducers, and actions. Redux however has grown a lot over the years, providing more and more tools that help deal with complex scenarios. By now there are so many different ways of doing things, and so many different techniques, that learning about the system can be quite overwhelming at first.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is probably not as big of a problem when a proper tutorial is followed, but I personally always just learn by doing things and playing around. I usually have a quick look at the documentation, and then just get started right away. I think this style of learning is a bit more difficult for this particular library compared to most other libraries I use.\"))), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Model react premise\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Model react premise\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Model-react is based on the idea of the observer design pattern:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"~/observer.png\",\n    \"alt\": \"Observer\"\n  })), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This pattern is essentially the OOP version of how you can have a listener in JavaScript:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=Listeners.tsx\",\n    \"title\": \"Listeners.tsx\"\n  }, \"const listener = (event) => console.log(event);\\n\\nelement.addEventListener(\\\"click\\\", listener);\\n\\n...\\n\\nelement.removeEventListener(\\\"click\\\", listener);\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"However with the observer design pattern, there is only 1 event type: the data change event.\\nIf I would want to have some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Person\"), \" class with an observable name, I could do something like this:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=Person.tsx\",\n    \"title\": \"Person.tsx\"\n  }, \"class Person {\\n    protected name: string = \\\"\\\";\\n    public setName(name: string): void {\\n        this.name = name;\\n        this.update();\\n    }\\n    public getName(): string {\\n        return name;\\n    }\\n\\n    protected observers: (() => void)[] = [];\\n    public addObserver(observer: () => void): void {\\n        if (!this.observers.includes) this.observers.push(observer);\\n    }\\n    public removeObserver(observer: () => void): void {\\n        const index = this.observers.indexOf(observer);\\n        if (index != -1) this.observers.splice(index, 1);\\n    }\\n    public update() {\\n        this.observers.forEach(observer => observer());\\n    }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now when you want to use a person's data and update something when their name changes, you can simply add an observer:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=observing.tsx\",\n    \"title\": \"observing.tsx\"\n  }, \"const person = new Person();\\nconst observer = () => {\\n    // Use person to update something, E.g. rerender a react element\\n}\\n\\nperson.addObserver(observer);\\n\\n...\\n\\nperson.removeObserver(observer);\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We could create a react hook that takes care of the observer management, and create components like this:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=SomeComponent.tsx\",\n    \"title\": \"SomeComponent.tsx\"\n  }, \"const SomeComponent: FC<{person: Person}> = ({person}) => {\\n    useObserver(person);\\n\\n    return <div>name: {person.name}</div>;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"However, this approach has one large flaw: updates are object specific, rather than property specific. For example, if I add another propery \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"age\"), \" to the person, while having a component observe only their name, changes to age will still cause rerenders. Consider the following code:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=Person.tsx\",\n    \"title\": \"Person.tsx\"\n  }, \"class Person {\\n    protected name: string = \\\"\\\";\\n    public setName(name: string): void {\\n        this.name = name;\\n        this.update();\\n    }\\n    public getName(): string {\\n        return name;\\n    }\\n\\n\\n    protected age: number = 0;\\n    public setAge(age: number): void {\\n        this.age = age;\\n        this.update();\\n    }\\n    public getAge(): number {\\n        return age;\\n    }\\n\\n    ...\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setName\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setAge\"), \" will call the same update method. Meaning that there's no differentiation between them in terms of updates. Fixing this is rather difficult, since each property would need its own set of observers. Additionally every component would need to correctly add its observers to the right properties.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In essence, Model-react is a library that provides tools to take care of this without adding much boilerplate. Usage now looks something like this:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=modelReactUsage.tsx\",\n    \"title\": \"modelReactUsage.tsx\"\n  }, \"import {Field, useDataHook, IDataHook} from \\\"model-react\\\";\\n\\nclass Person {\\n    protected name = new Field(\\\"\\\");\\n    public setName(name: string): void {\\n        this.name.set(name);\\n    }\\n    public getName(hook?: IDataHook): string {\\n        return this.name.get(hook);\\n    }\\n\\n    protected age = new Field(0);\\n    public setAge(age: number): void {\\n        this.age.set(age);\\n    }\\n    public getAge(age?: IDataHook): number {\\n        return this.age.get(hook);\\n    }\\n}\\n\\nconst SomeComponent: FC<{person: Person}> = ({person}) => {\\n    const [hook] = useDataHook();\\n\\n    return <div>name: {person.getName(hook)}</div>;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" is an example of what I call a \\\"data-source\\\". These data sources hold some piece of immutable data, and store observers (here called \\\"data-hooks\\\"). The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useDataHook\"), \" react hook can then be used to create an appropriate data-hook from within a react component. This data-hook is an object that includes an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"call\"), \" function that will be used to let React know when used data has been updated.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The big difference between this and the observer design pattern is that here observers (data-hooks) for a given property are added while retrieving the property, instead of having to specify dedicated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addObserver\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removeObserver\"), \" functions for each property.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Model react benefits\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Model react benefits\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There are several aspects to this system that I quite like and think are worth mentioning. Once again, keep in mind that this is just based on my personal opinion and preferences.\"), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Flexible programming style\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Flexible programming style\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Model-react simply provides a set of tools to create data-sources and data-hooks. How these are used does not matter because model-react is not interested in the data flow or structure. This means you can write your code in an object oriented way as I illustrated above. But you could also create a shorthand way like this:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=modelReactShorthandUsage.tsx\",\n    \"title\": \"modelReactShorthandUsage.tsx\"\n  }, \"import {Field} from \\\"model-react\\\";\\n\\nclass Person {\\n    public name = new Field(\\\"\\\");\\n    public age = new Field(0);\\n}\\n\\nconst SomeComponent: FC<{person: Person}> = ({person}) => {\\n    const [hook] = useDataHook();\\n\\n    return <div>name: {person.name.get(hook)}</div>;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Or you can get rid of anything class-based and do it more schema based like redux does:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=modelReactSchema.tsx\",\n    \"title\": \"modelReactSchema.tsx\"\n  }, \"const data = {\\n    users: new Field([\\n        {\\n            name: new Field(\\\"Bob\\\"),\\n            age: new Field(10)\\n        },\\n        {\\n            name: new Field(\\\"Kim\\\"),\\n            age: new Field(30)\\n        }\\n    ]);\\n};\\n\\nconst SomeComponent: FC = ()=>{\\n    const [hook] = useDataHook();\\n\\n    return <div>\\n        {data.users.get(hook).map(user=>(\\n            <div>\\n                name: {user.name.get(hook)}\\n            </div>\\n        ))}\\n    </div>;\\n}\\n\"))), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Native TypeScript support\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Native TypeScript support\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Model-react is designed with TypeScript in mind, and does not make use of any of the complex TypeScript mapping features like Redux does. Most of the typings can automatically be infered by TypeScript and you generally don't have to worry about types. The only place where you usually have explicit type definitions is when you take \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDataHook\"), \" as an argument within your method, since arguments should always be typed.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Transparency\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Transparency\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Model-react does have some level of abstraction, but it's not in a form that I consider to be \\\"black magic\\\". The complexity hides in the data-hooks and data-sources, but not in the data flow. You are fully in control of how the data is accessed, but you will have to consider that a data-hook should be passed to a data-source when accessing data if you want the hook to be aware of changes. Additionally the connection between the data-hook and react simply follows the established standard of react hooks, which are known to cause rerenders when necessary, and should therefor also be easy to understand to most users.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It may not be obvious how hooks internally work, or how data sources work, but this isn't relevant for usage.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Meta data\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Meta data\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Data-sources are also able to pass meta-data to the data-hooks. This includes information of whether the data is currently loading, and whether any exceptions occured. This data is not relevant for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" data-source, but can be useful for other data sources. Model-react for instance comes with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DataLoader\"), \" data-source, which can be used to fetch external data:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=dataLoaderUsage.tsx\",\n    \"title\": \"dataLoaderUsage.tsx\"\n  }, \"export const source = new DataLoader(async () => {\\n    // Fake api: https://reqres.in/\\n    const apiUrl = \\\"https://reqres.in/api/users?delay=1\\\";\\n    const {data} = await (await fetch(apiUrl)).json();\\n    return data[0].first_name;\\n}, \\\"none\\\"); // \\\"none\\\" is the initial value\\n\\nconst SomeComponent: FC = () => {\\n    const [hook, {isLoading, getExceptions}] = useDataHook();\\n\\n    const value = source.get(hook);\\n\\n    if (isLoading()) return <div> Loading </div>;\\n    const errors = getExceptions();\\n    if (errors.length !== 0)\\n        return <div> An error occured while fetching data </div>;\\n\\n    return <div> {value} </div>;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The data-hook will automatically force the data-source to fetch the data when first accessed. This means that data is not being loaded unless actively used.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There unfortunately is a small caveat with this system, because \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isLoading\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getExceptions\"), \" should be called after all values have been read. The following code would for instance not work:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=faultyDataLoaderUsage.tsx\",\n    \"title\": \"faultyDataLoaderUsage.tsx\"\n  }, \"const SomeComponent: FC = () => {\\n    const [hook, {isLoading, getExceptions}] = useDataHook();\\n\\n    if (isLoading()) return <div> Loading </div>;\\n    const errors = getExceptions();\\n    if (errors.length !== 0)\\n        return <div> An error occured while fetching data </div>;\\n\\n    return <div> {source.get(hook)} </div>;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This means that you would need to introduce many variables upfront for data, if you use many properties. To improve this as well as reduce boilerplate, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Loader\"), \" component exists:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=loaderusage.tsx\",\n    \"title\": \"loaderusage.tsx\"\n  }, \"const SomeComponent: FC = () => (\\n    <Loader\\n        onLoad={<div> Loading </div>}\\n        onError={<div> An error occured while fetching data </div>}>\\n        {hook => <div> {source.get(hook)} </div>}\\n    </Loader>\\n);\\n\"))), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Derived data\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Derived data\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The prinviple of model-react natively allows for creation of derived data. This is data that can be computed/derived from existing data, and should be able to inform hooks of changes when its value changes.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"All you have to do to create some derived data, is create a function that accepts a data-hook and pass it to the used data-sources. Consider for instance the scenario where we want to add an \\\"overview\\\" property to our Person class:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=personOverview.tsx\",\n    \"title\": \"personOverview.tsx\"\n  }, \"class Person {\\n    public name = new Field(\\\"\\\");\\n    public age = new Field(0);\\n    public getOverview(hook?: IDataHook): string {\\n        return `name: ${name.get(hook)} - age: ${age.get(hook)}`;\\n    }\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Usage of this new property is as easy as you expect:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=derivedPropertyAccess.tsx\",\n    \"title\": \"derivedPropertyAccess.tsx\"\n  }, \"const SomeComponent: FC<{person: Person}> = ({person}) => {\\n    const [hook] = useDataHook();\\n\\n    return <div>{person.getOverview(hook)}</div>;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"However, every time \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getOverview\"), \" is called, it will recompute the overview, even if the data hasn't changed. For this example this is not a big problem, since the computation is light, but for heavier computations this can really harm performance.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To solve this, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DataCacher\"), \" data-source exists. This data-source simply wraps a derived property, and makes sure to cache it as long as no data changes. Usage is very straightforward:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=personOverview.tsx\",\n    \"title\": \"personOverview.tsx\"\n  }, \"class Person {\\n    public name = new Field(\\\"\\\");\\n    public age = new Field(0);\\n    public overview = new DataCacher(hook => {\\n        return `name: ${name.get(hook)} - age: ${age.get(hook)}`;\\n    });\\n}\\n\\nconst SomeComponent: FC<{person: Person}> = ({person}) => {\\n    const [hook] = useDataHook();\\n\\n    return <div>{person.overview.get(hook)}</div>;\\n};\\n\"))), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Semi-global state\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Semi-global state\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"State does not need to be fully global using model-react. You can easily instantiate a class that uses model-react from within a given component, and pass the instance around to elements in the subtree (possibly using contexts). This means that model-react can be used anywhere from global state to fully local state without issues. This allows you to neatly separate rendering and business logic anywhere you wish, by defining the logic/data to purely operate on model-react data sources rather than pure React-state.\"))), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Model-react drawbacks\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Model-react drawbacks\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I personalyl really like model-react, but I'm also aware of several issues. I'm planning some follow-up library that hopefully fixes some of these, but this hasn't been made yet. Besides the listed issues, there are of course also more inherent issues related to mutability of data and the OOP form of programming that this library encourages. I however won't go into these, since they are not specific to my library.\"), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Confusing\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Confusing\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Many people that I've shown my library to, were quite confused about this notion of data-Hooks. This may partially due to the name I chose for it, but this is likely not the main issue. I expect that people have difficulty understanding that the hook is used as an argument for the property you're retrieving. Unless you're already very familiar with the notion of callbacks, this may be unexpected. Additionally it does not help that a data-hook is not a plain function. So it's harder to see that it essentially is just a callback function to inform about data changes.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I would need to do some more user (developer) testing and interview people about their experience to really find out how this can be improved. As discussed earlier, I value transparancy of the system, in order to reduce the number of bugs people create, so this is certainly worth looking into.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Inefficient\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Inefficient\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"During every component rerender, the component's data-hook is removed from all its subscribed data-sources, and readded to the appropriate data-sources. This operation can be relatively expensive if a component is rerendered often, and when many properties are observered. This is especially true when a large react subtree is entirely rerendered.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"I've not experienced any performance issues in practice. But at least on paper this can be quite a concern. I've not done any extensive testing in scenarios where these issues are likely to occur, nor tested anything on lower-end hardware.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"No update surpression\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"No update surpression\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When having derived data, updatees from a used data-source don't always result in a change of the derived data. Consider for instance the following scenario:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=uselessUpdate.tsx\",\n    \"title\": \"uselessUpdate.tsx\"\n  }, \"const age = new Field(25);\\nconst isAdult = (hook?: IDataHook) => age.get(hook) >= 21;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When the age changes from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"25\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"26\"), \", an update to listeners of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isAdult\"), \" will be dispatched, even though the value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isAdult\"), \" did not change. Model-react currently has no system in place that allows for such unnecessary updates to be surpressed.\")))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#model-react\" class=\"css-nn640c\"><h1>Model-react</h1></a><p>Model react is a library that allows developers to create data models with observable properties without adding a lot of boilerplate. This way your data model can serve as an observable state to be visualized by <a href=\"https://reactjs.org/\" class=\"css-0\">React</a>. Many alternative state management libraries exist, usually following the same core principles as <a href=\"https://redux.js.org/\" class=\"css-0\">Redux</a>, but I was not sold on any of them.\nI observed multiple issues with these libraries, and tried to resolve those with my own library. I don&#x27;t claim that my library is better than others, since it has its own set of issues, but it does fit my own programming style better.</p><p>I&#x27;ve used model-react in many of my own projects, including <a href=\"/projects/launchmenu\" class=\"css-0\">LaunchMenu</a> and <a href=\"/projects/sweeper\" class=\"css-0\">Sweeper</a>.</p><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#preview\" class=\"css-nn640c\"><h2>Preview</h2></a><p>Below is a preview of some simple application visualizing a <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Person</code> state. The premise of model-react is further explained in the <a href=\"#model-react-premise\" class=\"css-0\">premise section</a></p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=demo.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">demo.tsx</div><div class=\"MuiBox-root jss1\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token module\" style=\"color:#0000ff\">import</span><span> </span><span class=\"token imports\" style=\"color:#393A34\">{</span><span class=\"token imports maybe-class-name\">Field</span><span class=\"token imports\" style=\"color:#393A34\">,</span><span class=\"token imports\"> useDataHook</span><span class=\"token imports\" style=\"color:#393A34\">}</span><span> </span><span class=\"token module\" style=\"color:#0000ff\">from</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;model-react&quot;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token module\" style=\"color:#0000ff\">import</span><span> </span><span class=\"token imports maybe-class-name\">React</span><span> </span><span class=\"token module\" style=\"color:#0000ff\">from</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;react&quot;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token module\" style=\"color:#0000ff\">import</span><span> </span><span class=\"token imports\" style=\"color:#393A34\">{</span><span class=\"token imports\">render</span><span class=\"token imports\" style=\"color:#393A34\">}</span><span> </span><span class=\"token module\" style=\"color:#0000ff\">from</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;react-dom&quot;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Person</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">constructor</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">name</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> age</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">name</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span>name</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">age</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span>age</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">setName</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">name</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">name</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">set</span><span class=\"token\" style=\"color:#393A34\">(</span><span>name</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">getName</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">h</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">name</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>h</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">setAge</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">age</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">age</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">set</span><span class=\"token\" style=\"color:#393A34\">(</span><span>age</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">getAge</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">h</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">age</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>h</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable maybe-class-name\" style=\"color:#393A34\">PersonEditor</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\" style=\"color:#393A34\">{</span><span class=\"token parameter\">person</span><span class=\"token parameter\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>h</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">useDataHook</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">            </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">input</span><span class=\"token\" style=\"color:#800000\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#800000\">                </span><span class=\"token\" style=\"color:#ff0000\">value</span><span class=\"token script language-javascript script-punctuation\" style=\"color:#800000\">=</span><span class=\"token script language-javascript\" style=\"color:#393A34\">{</span><span class=\"token script language-javascript\" style=\"color:#800000\">person</span><span class=\"token script language-javascript\" style=\"color:#393A34\">.</span><span class=\"token script language-javascript method property-access\" style=\"color:#800000\">getName</span><span class=\"token script language-javascript\" style=\"color:#393A34\">(</span><span class=\"token script language-javascript\" style=\"color:#800000\">h</span><span class=\"token script language-javascript\" style=\"color:#393A34\">)</span><span class=\"token script language-javascript\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#800000\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#800000\">                </span><span class=\"token\" style=\"color:#ff0000\">onChange</span><span class=\"token script language-javascript script-punctuation\" style=\"color:#800000\">=</span><span class=\"token script language-javascript\" style=\"color:#393A34\">{</span><span class=\"token script language-javascript parameter\" style=\"color:#800000\">e</span><span class=\"token script language-javascript\" style=\"color:#800000\"> </span><span class=\"token script language-javascript arrow\" style=\"color:#800000\">=&gt;</span><span class=\"token script language-javascript\" style=\"color:#800000\"> person</span><span class=\"token script language-javascript\" style=\"color:#393A34\">.</span><span class=\"token script language-javascript method property-access\" style=\"color:#800000\">setName</span><span class=\"token script language-javascript\" style=\"color:#393A34\">(</span><span class=\"token script language-javascript\" style=\"color:#800000\">e</span><span class=\"token script language-javascript\" style=\"color:#393A34\">.</span><span class=\"token script language-javascript property-access\" style=\"color:#800000\">target</span><span class=\"token script language-javascript\" style=\"color:#393A34\">.</span><span class=\"token script language-javascript property-access\" style=\"color:#800000\">value</span><span class=\"token script language-javascript\" style=\"color:#393A34\">)</span><span class=\"token script language-javascript\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#800000\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#800000\">            </span><span class=\"token\" style=\"color:#393A34\">/&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">            </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">input</span><span class=\"token\" style=\"color:#800000\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#800000\">                </span><span class=\"token\" style=\"color:#ff0000\">type</span><span class=\"token attr-equals\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#393A34\">&quot;</span><span class=\"token\" style=\"color:#0000ff\">number</span><span class=\"token\" style=\"color:#393A34\">&quot;</span><span class=\"token\" style=\"color:#800000\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#800000\">                </span><span class=\"token\" style=\"color:#ff0000\">value</span><span class=\"token script language-javascript script-punctuation\" style=\"color:#800000\">=</span><span class=\"token script language-javascript\" style=\"color:#393A34\">{</span><span class=\"token script language-javascript\" style=\"color:#800000\">person</span><span class=\"token script language-javascript\" style=\"color:#393A34\">.</span><span class=\"token script language-javascript method property-access\" style=\"color:#800000\">getAge</span><span class=\"token script language-javascript\" style=\"color:#393A34\">(</span><span class=\"token script language-javascript\" style=\"color:#800000\">h</span><span class=\"token script language-javascript\" style=\"color:#393A34\">)</span><span class=\"token script language-javascript\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#800000\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#800000\">                </span><span class=\"token\" style=\"color:#ff0000\">onChange</span><span class=\"token script language-javascript script-punctuation\" style=\"color:#800000\">=</span><span class=\"token script language-javascript\" style=\"color:#393A34\">{</span><span class=\"token script language-javascript parameter\" style=\"color:#800000\">e</span><span class=\"token script language-javascript\" style=\"color:#800000\"> </span><span class=\"token script language-javascript arrow\" style=\"color:#800000\">=&gt;</span><span class=\"token script language-javascript\" style=\"color:#800000\"> person</span><span class=\"token script language-javascript\" style=\"color:#393A34\">.</span><span class=\"token script language-javascript method property-access\" style=\"color:#800000\">setAge</span><span class=\"token script language-javascript\" style=\"color:#393A34\">(</span><span class=\"token script language-javascript known-class-name\" style=\"color:#800000\">Number</span><span class=\"token script language-javascript\" style=\"color:#393A34\">(</span><span class=\"token script language-javascript\" style=\"color:#800000\">e</span><span class=\"token script language-javascript\" style=\"color:#393A34\">.</span><span class=\"token script language-javascript property-access\" style=\"color:#800000\">target</span><span class=\"token script language-javascript\" style=\"color:#393A34\">.</span><span class=\"token script language-javascript property-access\" style=\"color:#800000\">value</span><span class=\"token script language-javascript\" style=\"color:#393A34\">)</span><span class=\"token script language-javascript\" style=\"color:#393A34\">)</span><span class=\"token script language-javascript\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#800000\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#800000\">            </span><span class=\"token\" style=\"color:#393A34\">/&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">        </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable maybe-class-name\" style=\"color:#393A34\">PersonProfile</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\" style=\"color:#393A34\">{</span><span class=\"token parameter\">person</span><span class=\"token parameter\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>h</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">useDataHook</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">            Name: </span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">getName</span><span class=\"token\" style=\"color:#393A34\">(</span><span>h</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token plain-text\"> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">br</span><span class=\"token\" style=\"color:#800000\"> </span><span class=\"token\" style=\"color:#393A34\">/&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">            Age: </span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">getAge</span><span class=\"token\" style=\"color:#393A34\">(</span><span>h</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">        </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> john </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Person</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;John&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">render</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">        </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#2B91AF\">PersonEditor</span><span class=\"token\" style=\"color:#800000\"> </span><span class=\"token\" style=\"color:#ff0000\">person</span><span class=\"token script language-javascript script-punctuation\" style=\"color:#800000\">=</span><span class=\"token script language-javascript\" style=\"color:#393A34\">{</span><span class=\"token script language-javascript\" style=\"color:#800000\">john</span><span class=\"token script language-javascript\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#800000\"> </span><span class=\"token\" style=\"color:#393A34\">/&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">        </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#2B91AF\">PersonProfile</span><span class=\"token\" style=\"color:#800000\"> </span><span class=\"token\" style=\"color:#ff0000\">person</span><span class=\"token script language-javascript script-punctuation\" style=\"color:#800000\">=</span><span class=\"token script language-javascript\" style=\"color:#393A34\">{</span><span class=\"token script language-javascript\" style=\"color:#800000\">john</span><span class=\"token script language-javascript\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#800000\"> </span><span class=\"token\" style=\"color:#393A34\">/&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">    </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token dom\" style=\"color:#36acaa\">document</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">getElementById</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;root&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Below is a demo of what this code results in:</p><div><div><input value=\"John\"/><input type=\"number\" value=\"1\"/></div><div>Name: <!-- -->John<!-- --> <br/>Age: <!-- -->1</div></div></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#why-use-a-state-manager?\" class=\"css-nn640c\"><h2>Why use a state manager?</h2></a><p>React comes with great tools for managing local state on a component level. However, when multiple components have to interact with each other and share state, it can quickly become difficult to manage this state. Such a state is usually called a &quot;global state&quot;. React provides <a href=\"https://reactjs.org/docs/context.html\" class=\"css-0\">contexts</a> that help spread state around in your application, but managing complex state can still be difficult. This is especially true when trying to combine different systems with React. One example of this is trying to synchronize React state with graphics made using <a href=\"https://threejs.org/\" class=\"css-0\">three.js</a> like I&#x27;ve done in <a href=\"/projects/sweeper\" class=\"css-0\">Sweeper</a>.</p><p>State management libraries simply provide additional tools to help you manage such complex state. You don&#x27;t strictly <em>need</em> to use such a library, but it can be a huge aid for bigger projects to keep everything managable and easy to understand.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#redux-issues\" class=\"css-nn640c\"><h2>Redux issues</h2></a><p>Redux has several problems in my opinion, but most of these &quot;issues&quot; aren&#x27;t objectively bad. As with many things in life, there are many trade-offs between different properties, and it just so happens that I value different things than the developers of redux did. Additionally you should take my complaints with a grain of salt, since I&#x27;ve not had extensive experience with Redux. I&#x27;ve used it for a couple of small projects, but due to never having been sold on it, I&#x27;ve tried to stay clear of it when possible.</p><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#forced-programming-style\" class=\"css-nn640c\"><h3>Forced programming style</h3></a><p>JavaScript (or TypeScript) is a really flexible language in terms of the programming paradigms and styles it allows for. You can for instance program in a functional way (though lacking some more advanced functional programming features), in a procedural way, in an object oriented way, and so on. React largely follows this idea by providing a flexible core library (batteries excluded), rather than being a complete framework. It has some primitive constructs such as a <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">render</code> function, the concepts of components and hooks, and the jsx syntax. Other than that, however, the way you structure your code and make use of react-elements is quite flexible once you understand how everything works. You usually end up combining React with a bunch of other tools and libraries in order to create your application. <a href=\"/projects/launchmenu\" class=\"css-0\">LaunchMenu</a> provides a good example of React&#x27;s flexibility. We ended up not relying on React&#x27;s virtual-dom and life-cycle at all when structuring our application, but instead only used react to specify how to render the UI.\nRedux as a state-management library on the other hand forces a certain style on its users. There&#x27;s nothing inherently wrong with this, but if this isn&#x27;t the style you&#x27;re used to it may be difficult to work with at first. From what I observed, this style is one that many people are unfamiliar with, since it&#x27;s more similar to functional programming than object oriented programming. Therefore I think this lock-in is particularlly cumbersome.</p><p>For the sake of fairness I should however mention that this lock-in to a certain style also allows redux users to easily add additional features to their codebase that are only possible due to the predictable nature of the code written with redux. One such feature is the ability to easily store local state through different sessions (sessions interupted by a page reload), since the state is fully serialisable. This is a good example of the trade-offs between different properties that I perviously mentioned.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#poor-typescript-support\" class=\"css-nn640c\"><h3>Poor TypeScript support</h3></a><p>Redux does have TypeScript support, but this seems to be more of an afterthought than a native feature. Because TypeScript has a very powerful typing system <a href=\"https://github.com/microsoft/TypeScript/issues/14833\" class=\"css-0\">which is even Turing complete</a>, they managed to make TypeScript work relatively well, but I still experienced some difficulties when using it. I sometimes had to add more typing information than I would like, and many of the built-in data types such as <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ThunkAction</code> end up with many generic parameters.</p><p>Redux certainly is TypeScript compatible, and using it with TypeScript doesn&#x27;t cause many issues, but I would argue it doesn&#x27;t feel very smooth or well-integrated either.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#data-transformations\" class=\"css-nn640c\"><h3>Data transformations</h3></a><p>Redux relies on users defining their own serialisable plain data format, as well as &quot;reducers&quot; that can modify this data based on a recieved action. This means that the data is completely serialisable and essentially plain JSON. However when you want to use the data in a React component, you can&#x27;t simply read off the property from this plain JSON. If you did this, React would not be aware of when the data changed, and hence wouldn&#x27;t rerender your element when needed.</p><p>To solve this, Redux makes use of a <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">useSelector</code> hook. Usage can for instance look something like this:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=useSelectorUsage.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">useSelectorUsage.tsx</div><div class=\"MuiBox-root jss2\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> todo </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">useSelector</span><span class=\"token\" style=\"color:#393A34\">(</span><span>state </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> state</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">todos</span><span class=\"token\" style=\"color:#393A34\">[</span><span>props</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">id</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Now it looks like you&#x27;re still reading a value off of this pure JSON data, but in reality you are not. I don&#x27;t know the exact implementation details, but you&#x27;re most likely reading off of a proxy object, which will mirror the strucutre of your original data. This means that the hook can observe what data you exactly accessed, and can internally make sure it will start observing any changes to this data.</p><p>This works rather well, but I do consider this <a href=\"https://en.wikipedia.org/wiki/Magic_(programming)\" class=\"css-0\">&quot;black magic&quot;</a>. I generally am opposed to these types of things, since it reduces transparancy of how the software actually operates, which increases the chances of creating bugs. Once again there&#x27;s a trade-off at play between transparancy and ease of use, but I am personally not a fan of how things work here. I think my main issue is that everything is presented as if it&#x27;s very simple, while actually having many things going on behind the scenes.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#overwhelming\" class=\"css-nn640c\"><h3>Overwhelming</h3></a><p>The basic idea of Redux is pretty simple, and relatively nice in my opinion. You just have the concept of your plain JSON data, reducers, and actions. Redux however has grown a lot over the years, providing more and more tools that help deal with complex scenarios. By now there are so many different ways of doing things, and so many different techniques, that learning about the system can be quite overwhelming at first.</p><p>This is probably not as big of a problem when a proper tutorial is followed, but I personally always just learn by doing things and playing around. I usually have a quick look at the documentation, and then just get started right away. I think this style of learning is a bit more difficult for this particular library compared to most other libraries I use.</p></section></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#model-react-premise\" class=\"css-nn640c\"><h2>Model react premise</h2></a><p>Model-react is based on the idea of the observer design pattern:</p><p><img alt=\"Observer\" src=\"/pages\\1-projects\\Model-React/observer.png\" style=\"max-width:100%\"/></p><p>This pattern is essentially the OOP version of how you can have a listener in JavaScript:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=Listeners.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">Listeners.tsx</div><div class=\"MuiBox-root jss3\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">listener</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">event</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token console\" style=\"color:#2B91AF\">console</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">log</span><span class=\"token\" style=\"color:#393A34\">(</span><span>event</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>element</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">addEventListener</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;click&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> listener</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token spread\" style=\"color:#393A34\">...</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>element</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">removeEventListener</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;click&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> listener</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>However with the observer design pattern, there is only 1 event type: the data change event.\nIf I would want to have some <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Person</code> class with an observable name, I could do something like this:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=Person.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">Person.tsx</div><div class=\"MuiBox-root jss4\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Person</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">protected</span><span> name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;&quot;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">setName</span><span class=\"token\" style=\"color:#393A34\">(</span><span>name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">name</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> name</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">update</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">getName</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> name</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">protected</span><span> observers</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">addObserver</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token function-variable\" style=\"color:#393A34\">observer</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">!</span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">observers</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">includes</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">observers</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">push</span><span class=\"token\" style=\"color:#393A34\">(</span><span>observer</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">removeObserver</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token function-variable\" style=\"color:#393A34\">observer</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> index </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">observers</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">indexOf</span><span class=\"token\" style=\"color:#393A34\">(</span><span>observer</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>index </span><span class=\"token\" style=\"color:#393A34\">!=</span><span> </span><span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">observers</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">splice</span><span class=\"token\" style=\"color:#393A34\">(</span><span>index</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">update</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">observers</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">forEach</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">observer</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">observer</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span></span></code></div><p>Now when you want to use a person&#x27;s data and update something when their name changes, you can simply add an observer:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=observing.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">observing.tsx</div><div class=\"MuiBox-root jss5\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> person </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Person</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">observer</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// Use person to update something, E.g. rerender a react element</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>person</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">addObserver</span><span class=\"token\" style=\"color:#393A34\">(</span><span>observer</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token spread\" style=\"color:#393A34\">...</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>person</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">removeObserver</span><span class=\"token\" style=\"color:#393A34\">(</span><span>observer</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>We could create a react hook that takes care of the observer management, and create components like this:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=SomeComponent.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">SomeComponent.tsx</div><div class=\"MuiBox-root jss6\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token maybe-class-name\">SomeComponent</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">FC</span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">Person</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\" style=\"color:#393A34\">{</span><span class=\"token parameter\">person</span><span class=\"token parameter\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">useObserver</span><span class=\"token\" style=\"color:#393A34\">(</span><span>person</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\">name: </span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">name</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>However, this approach has one large flaw: updates are object specific, rather than property specific. For example, if I add another propery <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">age</code> to the person, while having a component observe only their name, changes to age will still cause rerenders. Consider the following code:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=Person.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">Person.tsx</div><div class=\"MuiBox-root jss7\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Person</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">protected</span><span> name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;&quot;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">setName</span><span class=\"token\" style=\"color:#393A34\">(</span><span>name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">name</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> name</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">update</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">getName</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> name</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">protected</span><span> age</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">number</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">setAge</span><span class=\"token\" style=\"color:#393A34\">(</span><span>age</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">number</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">age</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> age</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">update</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">getAge</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">number</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> age</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token spread\" style=\"color:#393A34\">...</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span></span></code></div><p>Both <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">setName</code> and <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">setAge</code> will call the same update method. Meaning that there&#x27;s no differentiation between them in terms of updates. Fixing this is rather difficult, since each property would need its own set of observers. Additionally every component would need to correctly add its observers to the right properties.</p><p>In essence, Model-react is a library that provides tools to take care of this without adding much boilerplate. Usage now looks something like this:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=modelReactUsage.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">modelReactUsage.tsx</div><div class=\"MuiBox-root jss8\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token module\" style=\"color:#0000ff\">import</span><span> </span><span class=\"token imports\" style=\"color:#393A34\">{</span><span class=\"token imports maybe-class-name\">Field</span><span class=\"token imports\" style=\"color:#393A34\">,</span><span class=\"token imports\"> useDataHook</span><span class=\"token imports\" style=\"color:#393A34\">,</span><span class=\"token imports\"> </span><span class=\"token imports maybe-class-name\">IDataHook</span><span class=\"token imports\" style=\"color:#393A34\">}</span><span> </span><span class=\"token module\" style=\"color:#0000ff\">from</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;model-react&quot;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Person</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">protected</span><span> name </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">setName</span><span class=\"token\" style=\"color:#393A34\">(</span><span>name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">name</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">set</span><span class=\"token\" style=\"color:#393A34\">(</span><span>name</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">getName</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IDataHook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">name</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">protected</span><span> age </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">setAge</span><span class=\"token\" style=\"color:#393A34\">(</span><span>age</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">number</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">age</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">set</span><span class=\"token\" style=\"color:#393A34\">(</span><span>age</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">getAge</span><span class=\"token\" style=\"color:#393A34\">(</span><span>age</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IDataHook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">number</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">age</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token maybe-class-name\">SomeComponent</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">FC</span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">Person</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\" style=\"color:#393A34\">{</span><span class=\"token parameter\">person</span><span class=\"token parameter\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">useDataHook</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\">name: </span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">getName</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>This <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Field</code> is an example of what I call a &quot;data-source&quot;. These data sources hold some piece of immutable data, and store observers (here called &quot;data-hooks&quot;). The <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">useDataHook</code> react hook can then be used to create an appropriate data-hook from within a react component. This data-hook is an object that includes an <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">call</code> function that will be used to let React know when used data has been updated.</p><p>The big difference between this and the observer design pattern is that here observers (data-hooks) for a given property are added while retrieving the property, instead of having to specify dedicated <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">addObserver</code> and <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">removeObserver</code> functions for each property.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#model-react-benefits\" class=\"css-nn640c\"><h2>Model react benefits</h2></a><p>There are several aspects to this system that I quite like and think are worth mentioning. Once again, keep in mind that this is just based on my personal opinion and preferences.</p><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#flexible-programming-style\" class=\"css-nn640c\"><h3>Flexible programming style</h3></a><p>Model-react simply provides a set of tools to create data-sources and data-hooks. How these are used does not matter because model-react is not interested in the data flow or structure. This means you can write your code in an object oriented way as I illustrated above. But you could also create a shorthand way like this:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=modelReactShorthandUsage.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">modelReactShorthandUsage.tsx</div><div class=\"MuiBox-root jss9\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token module\" style=\"color:#0000ff\">import</span><span> </span><span class=\"token imports\" style=\"color:#393A34\">{</span><span class=\"token imports maybe-class-name\">Field</span><span class=\"token imports\" style=\"color:#393A34\">}</span><span> </span><span class=\"token module\" style=\"color:#0000ff\">from</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;model-react&quot;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Person</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> name </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> age </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token maybe-class-name\">SomeComponent</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">FC</span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">Person</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\" style=\"color:#393A34\">{</span><span class=\"token parameter\">person</span><span class=\"token parameter\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">useDataHook</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\">name: </span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">name</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Or you can get rid of anything class-based and do it more schema based like redux does:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=modelReactSchema.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">modelReactSchema.tsx</div><div class=\"MuiBox-root jss10\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> data </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    users</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;Bob&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            age</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">10</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;Kim&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            age</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">30</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token maybe-class-name\">SomeComponent</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token function-variable maybe-class-name\" style=\"color:#393A34\">FC</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">useDataHook</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">        </span><span class=\"token\" style=\"color:#393A34\">{</span><span>data</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">users</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">map</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">user</span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">                name: </span><span class=\"token\" style=\"color:#393A34\">{</span><span>user</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">name</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">            </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">    </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span></span></code></div></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#native-typescript-support\" class=\"css-nn640c\"><h3>Native TypeScript support</h3></a><p>Model-react is designed with TypeScript in mind, and does not make use of any of the complex TypeScript mapping features like Redux does. Most of the typings can automatically be infered by TypeScript and you generally don&#x27;t have to worry about types. The only place where you usually have explicit type definitions is when you take <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">IDataHook</code> as an argument within your method, since arguments should always be typed.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#transparency\" class=\"css-nn640c\"><h3>Transparency</h3></a><p>Model-react does have some level of abstraction, but it&#x27;s not in a form that I consider to be &quot;black magic&quot;. The complexity hides in the data-hooks and data-sources, but not in the data flow. You are fully in control of how the data is accessed, but you will have to consider that a data-hook should be passed to a data-source when accessing data if you want the hook to be aware of changes. Additionally the connection between the data-hook and react simply follows the established standard of react hooks, which are known to cause rerenders when necessary, and should therefor also be easy to understand to most users.</p><p>It may not be obvious how hooks internally work, or how data sources work, but this isn&#x27;t relevant for usage.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#meta-data\" class=\"css-nn640c\"><h3>Meta data</h3></a><p>Data-sources are also able to pass meta-data to the data-hooks. This includes information of whether the data is currently loading, and whether any exceptions occured. This data is not relevant for the <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Field</code> data-source, but can be useful for other data sources. Model-react for instance comes with a <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">DataLoader</code> data-source, which can be used to fetch external data:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=dataLoaderUsage.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">dataLoaderUsage.tsx</div><div class=\"MuiBox-root jss11\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token module\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> source </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">DataLoader</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#0000ff\">async</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// Fake api: https://reqres.in/</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> apiUrl </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;https://reqres.in/api/users?delay=1&quot;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>data</span><span class=\"token\" style=\"color:#393A34\">}</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token control-flow\" style=\"color:#0000ff\">await</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token control-flow\" style=\"color:#0000ff\">await</span><span> </span><span class=\"token\" style=\"color:#393A34\">fetch</span><span class=\"token\" style=\"color:#393A34\">(</span><span>apiUrl</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">json</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> data</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">first_name</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;none&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span> </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// &quot;none&quot; is the initial value</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token maybe-class-name\">SomeComponent</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token function-variable maybe-class-name\" style=\"color:#393A34\">FC</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>isLoading</span><span class=\"token\" style=\"color:#393A34\">,</span><span> getExceptions</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">useDataHook</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> value </span><span class=\"token\" style=\"color:#393A34\">=</span><span> source</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">isLoading</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\"> Loading </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> errors </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">getExceptions</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>errors</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">length</span><span> </span><span class=\"token\" style=\"color:#393A34\">!==</span><span> </span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\"> An error occured while fetching data </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\"> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>value</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token plain-text\"> </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>The data-hook will automatically force the data-source to fetch the data when first accessed. This means that data is not being loaded unless actively used.</p><p>There unfortunately is a small caveat with this system, because <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">isLoading</code> and <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">getExceptions</code> should be called after all values have been read. The following code would for instance not work:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=faultyDataLoaderUsage.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">faultyDataLoaderUsage.tsx</div><div class=\"MuiBox-root jss12\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token maybe-class-name\">SomeComponent</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token function-variable maybe-class-name\" style=\"color:#393A34\">FC</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>isLoading</span><span class=\"token\" style=\"color:#393A34\">,</span><span> getExceptions</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">useDataHook</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">isLoading</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\"> Loading </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> errors </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">getExceptions</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>errors</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">length</span><span> </span><span class=\"token\" style=\"color:#393A34\">!==</span><span> </span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\"> An error occured while fetching data </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\"> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>source</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token plain-text\"> </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>This means that you would need to introduce many variables upfront for data, if you use many properties. To improve this as well as reduce boilerplate, the <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Loader</code> component exists:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=loaderusage.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">loaderusage.tsx</div><div class=\"MuiBox-root jss13\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token maybe-class-name\">SomeComponent</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token function-variable maybe-class-name\" style=\"color:#393A34\">FC</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#2B91AF\">Loader</span><span class=\"token\" style=\"color:#800000\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#800000\">        </span><span class=\"token\" style=\"color:#ff0000\">onLoad</span><span class=\"token script language-javascript script-punctuation\" style=\"color:#800000\">=</span><span class=\"token script language-javascript\" style=\"color:#393A34\">{</span><span class=\"token script language-javascript\" style=\"color:#393A34\">&lt;</span><span class=\"token script language-javascript\" style=\"color:#800000\">div</span><span class=\"token script language-javascript\" style=\"color:#393A34\">&gt;</span><span class=\"token script language-javascript plain-text\" style=\"color:#800000\"> Loading </span><span class=\"token script language-javascript\" style=\"color:#393A34\">&lt;/</span><span class=\"token script language-javascript\" style=\"color:#800000\">div</span><span class=\"token script language-javascript\" style=\"color:#393A34\">&gt;</span><span class=\"token script language-javascript\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#800000\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#800000\">        </span><span class=\"token\" style=\"color:#ff0000\">onError</span><span class=\"token script language-javascript script-punctuation\" style=\"color:#800000\">=</span><span class=\"token script language-javascript\" style=\"color:#393A34\">{</span><span class=\"token script language-javascript\" style=\"color:#393A34\">&lt;</span><span class=\"token script language-javascript\" style=\"color:#800000\">div</span><span class=\"token script language-javascript\" style=\"color:#393A34\">&gt;</span><span class=\"token script language-javascript plain-text\" style=\"color:#800000\"> An error occured while fetching data </span><span class=\"token script language-javascript\" style=\"color:#393A34\">&lt;/</span><span class=\"token script language-javascript\" style=\"color:#800000\">div</span><span class=\"token script language-javascript\" style=\"color:#393A34\">&gt;</span><span class=\"token script language-javascript\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">        </span><span class=\"token\" style=\"color:#393A34\">{</span><span class=\"token parameter\">hook</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token plain-text\"> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>source</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token plain-text\"> </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token plain-text\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token plain-text\">    </span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#2B91AF\">Loader</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#derived-data\" class=\"css-nn640c\"><h3>Derived data</h3></a><p>The prinviple of model-react natively allows for creation of derived data. This is data that can be computed/derived from existing data, and should be able to inform hooks of changes when its value changes.</p><p>All you have to do to create some derived data, is create a function that accepts a data-hook and pass it to the used data-sources. Consider for instance the scenario where we want to add an &quot;overview&quot; property to our Person class:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=personOverview.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">personOverview.tsx</div><div class=\"MuiBox-root jss14\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Person</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> name </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> age </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">getOverview</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IDataHook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token template-string\" style=\"color:#A31515\">name: </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">name</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">.</span><span class=\"token template-string interpolation method property-access\" style=\"color:#393A34\">get</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">(</span><span class=\"token template-string interpolation\">hook</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">)</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\"> - age: </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">age</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">.</span><span class=\"token template-string interpolation method property-access\" style=\"color:#393A34\">get</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">(</span><span class=\"token template-string interpolation\">hook</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">)</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span></span></code></div><p>Usage of this new property is as easy as you expect:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=derivedPropertyAccess.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">derivedPropertyAccess.tsx</div><div class=\"MuiBox-root jss15\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token maybe-class-name\">SomeComponent</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">FC</span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">Person</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\" style=\"color:#393A34\">{</span><span class=\"token parameter\">person</span><span class=\"token parameter\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">useDataHook</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">getOverview</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>However, every time <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">getOverview</code> is called, it will recompute the overview, even if the data hasn&#x27;t changed. For this example this is not a big problem, since the computation is light, but for heavier computations this can really harm performance.</p><p>To solve this, a <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">DataCacher</code> data-source exists. This data-source simply wraps a derived property, and makes sure to cache it as long as no data changes. Usage is very straightforward:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=personOverview.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">personOverview.tsx</div><div class=\"MuiBox-root jss16\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Person</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> name </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> age </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> overview </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">DataCacher</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">hook</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token template-string\" style=\"color:#A31515\">name: </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">name</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">.</span><span class=\"token template-string interpolation method property-access\" style=\"color:#393A34\">get</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">(</span><span class=\"token template-string interpolation\">hook</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">)</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\"> - age: </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">age</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">.</span><span class=\"token template-string interpolation method property-access\" style=\"color:#393A34\">get</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">(</span><span class=\"token template-string interpolation\">hook</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">)</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token maybe-class-name\">SomeComponent</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">FC</span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">Person</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\" style=\"color:#393A34\">{</span><span class=\"token parameter\">person</span><span class=\"token parameter\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">useDataHook</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">{</span><span>person</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">overview</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">&lt;/</span><span class=\"token\" style=\"color:#800000\">div</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#semi-global-state\" class=\"css-nn640c\"><h3>Semi-global state</h3></a><p>State does not need to be fully global using model-react. You can easily instantiate a class that uses model-react from within a given component, and pass the instance around to elements in the subtree (possibly using contexts). This means that model-react can be used anywhere from global state to fully local state without issues. This allows you to neatly separate rendering and business logic anywhere you wish, by defining the logic/data to purely operate on model-react data sources rather than pure React-state.</p></section></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#model-react-drawbacks\" class=\"css-nn640c\"><h2>Model-react drawbacks</h2></a><p>I personalyl really like model-react, but I&#x27;m also aware of several issues. I&#x27;m planning some follow-up library that hopefully fixes some of these, but this hasn&#x27;t been made yet. Besides the listed issues, there are of course also more inherent issues related to mutability of data and the OOP form of programming that this library encourages. I however won&#x27;t go into these, since they are not specific to my library.</p><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#confusing\" class=\"css-nn640c\"><h3>Confusing</h3></a><p>Many people that I&#x27;ve shown my library to, were quite confused about this notion of data-Hooks. This may partially due to the name I chose for it, but this is likely not the main issue. I expect that people have difficulty understanding that the hook is used as an argument for the property you&#x27;re retrieving. Unless you&#x27;re already very familiar with the notion of callbacks, this may be unexpected. Additionally it does not help that a data-hook is not a plain function. So it&#x27;s harder to see that it essentially is just a callback function to inform about data changes.</p><p>I would need to do some more user (developer) testing and interview people about their experience to really find out how this can be improved. As discussed earlier, I value transparancy of the system, in order to reduce the number of bugs people create, so this is certainly worth looking into.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#inefficient\" class=\"css-nn640c\"><h3>Inefficient</h3></a><p>During every component rerender, the component&#x27;s data-hook is removed from all its subscribed data-sources, and readded to the appropriate data-sources. This operation can be relatively expensive if a component is rerendered often, and when many properties are observered. This is especially true when a large react subtree is entirely rerendered.</p><p>I&#x27;ve not experienced any performance issues in practice. But at least on paper this can be quite a concern. I&#x27;ve not done any extensive testing in scenarios where these issues are likely to occur, nor tested anything on lower-end hardware.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#no-update-surpression\" class=\"css-nn640c\"><h3>No update surpression</h3></a><p>When having derived data, updatees from a used data-source don&#x27;t always result in a change of the derived data. Consider for instance the following scenario:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=uselessUpdate.tsx\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">uselessUpdate.tsx</div><div class=\"MuiBox-root jss17\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> age </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Field</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">25</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">isAdult</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">hook</span><span class=\"token parameter\" style=\"color:#393A34\">?</span><span class=\"token parameter\" style=\"color:#393A34\">:</span><span class=\"token parameter\"> </span><span class=\"token parameter maybe-class-name\">IDataHook</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> age</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">&gt;=</span><span> </span><span class=\"token\" style=\"color:#36acaa\">21</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>When the age changes from <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">25</code> to <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">26</code>, an update to listeners of <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">isAdult</code> will be dispatched, even though the value of <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">isAdult</code> did not change. Model-react currently has no system in place that allows for such unnecessary updates to be surpressed.</p></section></section></section>","scope":{}},"urlBase":"/pages\\1-projects\\Model-React","ToC":[{"name":"Model-react","children":[{"name":"Preview","children":[]},{"name":"Why use a state manager?","children":[]},{"name":"Redux issues","children":[{"name":"Forced programming style","children":[]},{"name":"Poor TypeScript support","children":[]},{"name":"Data transformations","children":[]},{"name":"Overwhelming","children":[]}]},{"name":"Model react premise","children":[]},{"name":"Model react benefits","children":[{"name":"Flexible programming style","children":[]},{"name":"Native TypeScript support","children":[]},{"name":"Transparency","children":[]},{"name":"Meta data","children":[]},{"name":"Derived data","children":[]},{"name":"Semi-global state","children":[]}]},{"name":"Model-react drawbacks","children":[{"name":"Confusing","children":[]},{"name":"Inefficient","children":[]},{"name":"No update surpression","children":[]}]}]}],"shareData":{"title":"Model-react","description":"A library to allow visualization of object oriented software, using React.","tags":["React","data-model","data model","data management","reactive","watchable","subscribable","subscribe","state","state management"]},"links":[{"type":"github","url":"https://github.com/TarVK/model-react"},{"type":"demo","url":"https://tarvk.github.io/model-react/examples/build/"}],"index":{"rootPath":"","items":[{"name":"projects","orderIndex":1,"opened":true,"hasIndex":false,"children":[{"name":"Faces-in-plane","opened":false,"hasIndex":true,"children":[]},{"name":"LaunchMenu","opened":false,"hasIndex":true,"children":[]},{"name":"Mechanical-computer","opened":false,"hasIndex":true,"children":[]},{"name":"Model-checker","opened":false,"hasIndex":true,"children":[]},{"name":"Model-React","opened":false,"hasIndex":true,"children":[],"selected":true},{"name":"SAT","opened":false,"hasIndex":true,"children":[]},{"name":"Simulations","opened":false,"hasIndex":true,"children":[]},{"name":"Sweeper","opened":false,"hasIndex":true,"children":[]},{"name":"Waddles","opened":false,"hasIndex":true,"children":[]},{"name":"Hidden-blade","orderIndex":100,"opened":false,"hasIndex":true,"children":[]}]},{"name":"articles","orderIndex":2,"opened":false,"hasIndex":false,"children":[{"name":"Lambda-calculus","opened":false,"hasIndex":true,"children":[]}]},{"name":"hobbies","orderIndex":3,"opened":false,"hasIndex":false,"children":[{"name":"3D-modelling","opened":false,"hasIndex":true,"children":[]},{"name":"Freeskating","opened":false,"hasIndex":true,"children":[]},{"name":"juggling","opened":false,"hasIndex":true,"children":[]},{"name":"Kendama","opened":false,"hasIndex":true,"children":[]},{"name":"parkour","opened":false,"hasIndex":true,"children":[]},{"name":"Spinning","opened":false,"hasIndex":true,"children":[]}]}]}},"__N_SSG":true}