{"pageProps":{"url":"https://tarvk.github.io/projects/model-checker","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(PageSummary, {\n    title: \"Model checker\",\n    content: mdx(\"img\", {\n      src: \"~/modelCheckerGUI.png\"\n    }),\n    tags: [\"model checker\", \"model\", \"checker\", \"parity\", \"game\", \"solver\", \"labeled\", \"transition\", \"system\", \"LTS\"],\n    links: [{\n      type: \"github\",\n      text: \"Github model checker\",\n      url: \"https://github.com/TarVK/model-checker\"\n    }, {\n      type: \"demo\",\n      text: \"Demo model checker\",\n      url: \"https://tarvk.github.io/model-checker/demo/build/\"\n    }, {\n      type: \"github\",\n      text: \"Github PG solver\",\n      url: \"https://github.com/TarVK/parity-game-solver\"\n    }, {\n      type: \"demo\",\n      text: \"Demo PG solver\",\n      url: \"https://tarvk.github.io/parity-game-solver/demo/build/\"\n    }],\n    mdxType: \"PageSummary\"\n  }, mdx(\"p\", null, \"Implementations of common model checking algorithms\")), mdx(\"section\", {\n    \"name\": \"Model checker\",\n    \"depth\": 1\n  }, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Model checker\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There are many things in the world that can be considered in terms of \\\"behavior\\\": Software processes, business processes, board games, etcetera. This behavior can be formally described in many ways, one of which is the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Transition_system\"\n  }, \"Labeled Transition System (LTS)\"), \". Once behavior is formally modeled, desirable properties can also be modeled. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Modal_%CE%BC-calculus\"\n  }, \"Modal mu calculus\"), \" is one such formalism to describe properties. The act of model checking is verifying whether these properties are met by the described behavior.\"), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Labeled Transition Systems\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Labeled Transition Systems\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A LTS formally consists of 3 parts:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A set of nodes/states\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A set of labels/actions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A transition relation mapping nodes to another using labels\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"All these parts are commonly represented in a simple to understand drawing.\\nConsider for instance a LTS consisting of:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2 states: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One label: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"a\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One transition, connecting \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1\"), \" by means of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"a\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This LTS can be drawn as follows:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"~/LTSimage.png\",\n    \"alt\": \"A simple LTS\"\n  })), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Usually an initial state is identified on the LTS, and for instance drawn with a thicker border like above. This LTS describes the behavior that a single \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" action can occur, and nothing else can happen afterwards.\\nLTSes can describe infinite behavior, by means of loops. Consider for instance the following LTS:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"~/LTSimageLoop.png\",\n    \"alt\": \"A looping LTS\"\n  })), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here we start in state 0 again, and we can follow the transition arrows in a loop. Thus this behavior describes the infinite sequence of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" being iterated.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Finally LTSes can describe non-deterministic behavior. In other words, we don't know what will happen, multiple routes can be taken:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"~/LTSimageChoice.png\",\n    \"alt\": \"A looping LTS\"\n  })), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"These actions are rather abstract - and can represent almost anything depending on what you're modelling, so we will have a look at an example to get a better intuition.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Also note that describing behavior with an LTS by hand is often a lot of effort since LTSes can become very large when encoding all possibilities. Certain behavior even requires infinitely large LTSes to fully describe the behavior.\\nFor this reason most real world modelling systems use LTSes as an underlying mathematical model, but build a higher level and more user friendly modelling formalism on top of this. This model could then be translated to an (possibly infinite) LTS. One example of such a higher-level formalism is that of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Petri_net\"\n  }, \"Petri nets\"), \", and another is mCRL2's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.mcrl2.org/web/user_manual/language_reference/process.html\"\n  }, \"process-algebra\"), \".\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Modal Mu-calculus\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Modal Mu-calculus\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When we have a model to be checked, modal mu-calculus (\\u03BC-calculus) formulas can be written and verified on the model.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"One can create a formula according to the following CFG:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\",\n    \"metastring\": \"showHeader=false\",\n    \"showHeader\": \"false\"\n  }, \"f,g ::= false | true | (f) | !f | f && g | f || g | f => g | [r]f | <r>f | mu X.f | nu X.f | X\\nr,s ::= A | (r) | r + s | r . s | r* | r+\\nA,B ::= false | true | a | (A) | !A | A && B | A || B\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" ranges over all actions present in your LTS, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X\"), \" ranges over all valid variable names. Informally, the semantics of each of the base formula constructs can be explained in terms of (not) including a state \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"s\"), \" of an LTS as follows:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \": never includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \": always includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(f)\"), \": includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f\"), \" includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"!f\"), \": includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f\"), \" does \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"not\"), \" include state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f && g\"), \": includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f\"), \" includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"and\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"g\"), \" includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f || g\"), \": includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f\"), \" includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"or\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"g\"), \" includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f => g\"), \": includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" if whenever \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f\"), \" includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"g\"), \" also includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[r]f\"), \": includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" if for every path according to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" to some state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"q\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f\"), \" includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"q\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<r>f\"), \": includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" if there exists some path according to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" to some state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"q\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f\"), \" includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"q\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mu X.f\"), \": includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" if formula \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \", where only a finite sequence of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"X\"), \" variables was used\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nu X.f\"), \": includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" if formula \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \", where possibly an \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"infinite\"), \" sequence of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"X\"), \" variables is used\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"X\"), \": includes state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" if the fixed point (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mu\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nu\"), \") that binds the variable \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"X\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Next we have to express what paths an expression \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"r\"), \" represents. We informally define whether an expression \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"r\"), \" includes path \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"p\"), \" for each construct:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \" consists of a single action, which is contained in set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(r)\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r + s\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r . s\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r\"), \" includes a start sub-path of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \" includes the remainder of the path of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r*\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \" can be split into \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"0\"), \" or more sub-paths that each are included in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r+\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"p\"), \" can be split into \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"1\"), \" or more sub-paths that each are included in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Finally we have to express whether an action \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ac\"), \" is present in a set of actions:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \": never includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \": always includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\"), \" (if it appears somewhere in the LTS)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"a\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac == a\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"(A)\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"!A\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \" does not include \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A && B\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\"), \" \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"and\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"B\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A || B\"), \": includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\"), \" if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\"), \" \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"or\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"B\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ac\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Using this syntax we can express properties of the LTS rather concisely. For instance a formula describing that there exists a path of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" transition labels leading to a state with only \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" transitions can be described as follows:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<(a||b)*>!<!c>true\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This reads as: there exists a path of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" transitions repeated 0 or more times to a state where there does not exist an outgoing transition that's not a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" transition to any other state.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A more extensive description of these formulas as well as more extensive formulas not supported by my model checker can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.mcrl2.org/web/user_manual/articles/basic_modelling.html#specifying-systems\"\n  }, \"here on mCRL2's website\"), \".\"))), mdx(\"section\", {\n    \"name\": \"Model checking example\",\n    \"depth\": 1\n  }, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Model checking example\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Using model-checking, we can check whether the game of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Tic-tac-toe\"\n  }, \"tic-tac-toe games\"), \" has a winning strategy. A winning strategy is strategy such that no matter what choices the opponent makes, you're guaranteed to win (when playing according to the strategy).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Our model will have to describe all possible games of tic-tac-toe that can be played. Fortunately for us, tic-tac-toe is such a simple game that this is still quite computable.\"), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Generating the LTS\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Generating the LTS\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Creating a LTS by hand is usually rather cumbersome, since they can easily become extremely large. We shall use some JavaScript code to generate a LTS representing all possible tic-tac-toe games.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In our code, we shall represent the game by a 9 value long list, containing either the token \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"o\\\"\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"x\\\"\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \":\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"emptyGame.js\\\"\",\n    \"title\": \"\\\"emptyGame.js\\\"\"\n  }, \"const emptyGame = new Array(9).fill(null);\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The indices correspond to grid values as follows:\"), mdx(\"table\", null, mdx(\"tr\", null, mdx(\"td\", null, \"0\"), mdx(\"td\", null, \"1\"), mdx(\"td\", null, \"2\")), mdx(\"tr\", null, mdx(\"td\", null, \"3\"), mdx(\"td\", null, \"4\"), mdx(\"td\", null, \"5\")), mdx(\"tr\", null, mdx(\"td\", null, \"6\"), mdx(\"td\", null, \"7\"), mdx(\"td\", null, \"8\"))), mdx(\"style\", null, \"  table {\\n        border-spacing: 0px;\\n        border: 1px solid black;\\n    }\\n    td {\\n        padding-left: 7px;\\n        padding-right: 7px;\\n        margin: 0px;\\n    }\\n    td + td {\\n        border-left: 1px solid black;\\n    }\\n    tr + tr > td {\\n        border-top: 1px solid black;\\n    }\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Each of these states can also be encoded as a single number by representing each token with a digit, and giving each token its own index in base 3. We also add an extra dedicated state to represent the game being finished:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gameIDs.js\",\n    \"title\": \"gameIDs.js\"\n  }, \"const stateID = game =>\\n    game.reduceRight((s, v, i) => s + {null: 0, x: 1, o: 2}[v] * 3 ** i, 0);\\nconst finishedID = 3 ** 9;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Next we create some functions to retrieve the indices of remaining cells in which a player can still put their cross or nought, and a function to get a new game by putting a cross or nought at a given index:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=gameUpdating.js\",\n    \"title\": \"gameUpdating.js\"\n  }, \"const remaining = game => game.flatMap((v, i) => (v == null ? [i] : []));\\nconst set = (game, i, player) => [\\n    ...game.slice(0, i),\\n    player,\\n    ...game.slice(i + 1),\\n];\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Given a game state, we would also like to know whether either of the players have won. There are 3 different options we have to consider there:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3 tokens of the same type in a row\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3 tokens of the same type in a column\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3 tokens of the same type on a diagonal\\nWe can check this using the following code:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=winDetection.js\",\n    \"title\": \"winDetection.js\"\n  }, \"const getIndex = (i, j) => i + j * 3;\\nconst won = (game, player) => {\\n    for (let i = 0; i < 3; i++) {\\n        const wonColumn = [0, 1, 2].every(j => game[getIndex(i, j)] == player);\\n        const wonRow = [0, 1, 2].every(j => game[getIndex(j, i)] == player);\\n        if (wonColumn || wonRow) return true;\\n    }\\n    const wonDiagonal1 = [0, 1, 2].every(i => game[getIndex(i, i)] == player);\\n    const wonDiagonal2 = [0, 1, 2].every(\\n        i => game[getIndex(2 - i, i)] == player\\n    );\\n    return wonDiagonal1 || wonDiagonal2;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Finally we obtain all possible transitions from one state to another, starting at the state of an empty game. Each transition is encoded as a tuple: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[fromStateID, label, toStateID]\"), \". Strings are used to label each transition, where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x4\"), \" means the cross player placed an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" at index 4, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x-won\"), \" to represent player \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" won. Similar labels exist for the other player, and all other indices. The resulting code looks as follows:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=getTransitions.js\",\n    \"title\": \"getTransitions.js\"\n  }, \"const opposite = player => ({x: \\\"o\\\", o: \\\"x\\\"}[player]);\\nconst getTransitions = (game, player, visited = new Set(), out = []) => {\\n    const ID = stateID(game);\\n    if (visited.has(ID)) return;\\n    visited.add(ID);\\n\\n    if (won(game, \\\"x\\\")) out.push([ID, \\\"x-won\\\", finishedID]);\\n    else if (won(game, \\\"o\\\")) out.push([ID, \\\"o-won\\\", finishedID]);\\n    else\\n        remaining(game).forEach(i => {\\n            const newGame = set(game, i, player);\\n            out.push([ID, player + i, stateID(newGame)]);\\n            getTransitions(newGame, opposite(player), visited, out);\\n        });\\n    return out;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"These transitions can then be transformed into an LTS in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.mcrl2.org/web/user_manual/language_reference/lts.html#aldebaran-format\"\n  }, \"Aldebran format\"), \" which our model-checker can read in:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=getLTS.js\",\n    \"title\": \"getLTS.js\"\n  }, \"const getLTS = transitions =>\\n    `des(0, ${transitions.length}, ${finishedID})\\\\n` +\\n    transitions\\n        .map(([from, action, to]) => `(${from}, \\\"${action}\\\", ${to})`)\\n        .join(\\\"\\\\n\\\");\\n\\ncopy(getLTS(getTransitions(emptyGame, \\\"x\\\")));\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now executing this code stores a LTS in our clipboard, representing all possible tic-tac-toe games in which cross plays first. Below is the code as a whole:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=generateTicTacToeLTS.js spoiler=true\",\n    \"title\": \"generateTicTacToeLTS.js\",\n    \"spoiler\": \"true\"\n  }, \"const emptyGame = new Array(9).fill(null);\\nconst stateID = game =>\\n    game.reduceRight((s, v, i) => s + {null: 0, x: 1, o: 2}[v] * 3 ** i, 0);\\nconst finishedID = 3 ** 9;\\nconst remaining = game => game.flatMap((v, i) => (v == null ? [i] : []));\\nconst set = (game, i, player) => [\\n    ...game.slice(0, i),\\n    player,\\n    ...game.slice(i + 1),\\n];\\nconst getIndex = (i, j) => i + j * 3;\\nconst won = (game, player) => {\\n    for (let i = 0; i < 3; i++) {\\n        const wonColumn = [0, 1, 2].every(j => game[getIndex(i, j)] == player);\\n        const wonRow = [0, 1, 2].every(j => game[getIndex(j, i)] == player);\\n        if (wonColumn || wonRow) return true;\\n    }\\n    const wonDiagonal1 = [0, 1, 2].every(i => game[getIndex(i, i)] == player);\\n    const wonDiagonal2 = [0, 1, 2].every(\\n        i => game[getIndex(2 - i, i)] == player\\n    );\\n    return wonDiagonal1 || wonDiagonal2;\\n};\\n\\nconst opposite = player => ({x: \\\"o\\\", o: \\\"x\\\"}[player]);\\nconst getTransitions = (game, player, visited = new Set(), out = []) => {\\n    const ID = stateID(game);\\n    if (visited.has(ID)) return;\\n    visited.add(ID);\\n\\n    if (won(game, \\\"x\\\")) out.push([ID, \\\"x-won\\\", finishedID]);\\n    else if (won(game, \\\"o\\\")) out.push([ID, \\\"o-won\\\", finishedID]);\\n    else\\n        remaining(game).forEach(i => {\\n            const newGame = set(game, i, player);\\n            out.push([ID, player + i, stateID(newGame)]);\\n            getTransitions(newGame, opposite(player), visited, out);\\n        });\\n    return out;\\n};\\n\\nconst getLTS = transitions =>\\n    `des(0, ${transitions.length}, ${finishedID})\\\\n` +\\n    transitions\\n        .map(([from, action, to]) => `(${from}, \\\"${action}\\\", ${to})`)\\n        .join(\\\"\\\\n\\\");\\n\\ncopy(getLTS(getTransitions(emptyGame, \\\"x\\\")));\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The output of the code can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"~/ticTacToe.txt\"\n  }, \"here\"), \", but you can also execute it in your browser's JavaScript console.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Verifying formulas\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Verifying formulas\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We can now use mu-calculus to ask questions about our model. The model encodes that cross always makes the first move. It would be interesting to know whether nought can win at all if cross begins. You probably already knows this is definitely possible, but we can also verify this formally with our model.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We use the minimal fixed point operator mu, which essentially allows us to define a recursive formula. We shall let \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X\"), \" represent the states in which player nought can win. We say that player nought can win the game either if:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There exists a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"o-won\"), \" transition (remember that's how we encoded a winning state in our model)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There exists a transition of a move made by cross (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x0\"), \"-\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x8\"), \") to a state where nought can win\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There exists a transition of a move made by nought (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"o0\"), \"-\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"o8\"), \") to a state where nought can win\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"All with all, the formula is expressed as follows:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\",\n    \"metastring\": \"title=o-can-win\",\n    \"title\": \"o-can-win\"\n  }, \"mu X. (\\n    <o-won>true\\n    || <x0+x1+x2+x3+x4+x5+x6+x7+x8>X\\n    || <o0+o1+o2+o3+o4+o5+o6+o7+o8>X\\n)\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When running this in a model-checker, we will see that the formula is satisfied by the LTS, and hence player nought can indeed win.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now we would like to know whether nought also have a strategy that ensures they win. We can transform our previous formula to represent this, by replacing the statement:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There exists a transition of a move made by cross (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x0\"), \"-\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x8\"), \") to a state where nought can win\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"By the following statement:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For all transitions of a move made by cross (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x0\"), \"-\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x8\"), \") to a state \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"), \", nought can win \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"s\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We have to be careful here though, because nought and cross alternate in making moves. Hence for some states cross has no transitions at all, in which case this condition is trivially met. If cross has no transitions, then for all transitions it does have (none) nought can win. Hence we have to additionally add the following condition to this:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"And cross has at least a single transition of a move they can make (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x0\"), \"-\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x8\"), \")\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The formula representing this looks as follows:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\",\n    \"metastring\": \"title=o-has-winning-strategy\",\n    \"title\": \"o-has-winning-strategy\"\n  }, \"mu X. (\\n    <o-won>true\\n    || (\\n        <x0+x1+x2+x3+x4+x5+x6+x7+x8>true\\n        && [x0+x1+x2+x3+x4+x5+x6+x7+x8]X\\n    )\\n    || <o0+o1+o2+o3+o4+o5+o6+o7+o8>X\\n)\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Trying to verify this in any model checker will now tell us that this formula is not satisfied by the model. Hence nought has no winning strategy for the game if cross makes the first move.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Symmetrically we can check whether cross has a winning strategy in that case:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\",\n    \"metastring\": \"title=x-has-winning-strategy\",\n    \"title\": \"x-has-winning-strategy\"\n  }, \"mu X. (\\n    <x-won>true\\n    || (\\n        <o0+o1+o2+o3+o4+o5+o6+o7+o8>true\\n        && [o0+o1+o2+o3+o4+o5+o6+o7+o8]X\\n    )\\n    || <x0+x1+x2+x3+x4+x5+x6+x7+x8>X\\n)\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This property is however also not met. Neither cross or nought has a strategy that guarantees they win.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Logically, this must then mean that if neither cross nor nought can force a win, they must both be able to at least force a draw. I.e. there should exist a strategy that guarantees that the player does not lose.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We can check whether nought has such a strategy with a formula constructed using the maximal fixed point operator nu. The construction is quite similar to our previous one. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X\"), \" represents the states in which there is a strategy to not lose, it consists of 3 parts:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There does not exist \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"x-won\"), \" transition from this state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"And for all moves cross can make, nought has a non-losing strategy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"And there exists a move nought can make to a state in which they have a non-losing strategy, or nought can't make a move at all in this state\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\",\n    \"metastring\": \"title=o-has-non-losing-strategy\",\n    \"title\": \"o-has-non-losing-strategy\"\n  }, \"nu X. (\\n    !<x-won>true\\n    && [x0+x1+x2+x3+x4+x5+x6+x7+x8]X\\n    && (\\n        <o0+o1+o2+o3+o4+o5+o6+o7+o8>X\\n        || !<o0+o1+o2+o3+o4+o5+o6+o7+o8>true\\n    )\\n)\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A model-checker will tell us that this property is indeed met by the model, and the symmetric property of cross having a non-losing strategy is also met:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\",\n    \"metastring\": \"title=x-has-non-losing-strategy\",\n    \"title\": \"x-has-non-losing-strategy\"\n  }, \"nu X. (\\n    !<o-won>true\\n    && [o0+o1+o2+o3+o4+o5+o6+o7+o8]X\\n    && (\\n        <x0+x1+x2+x3+x4+x5+x6+x7+x8>X\\n        || !<x0+x1+x2+x3+x4+x5+x6+x7+x8>true\\n    )\\n)\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Hence in the game of tic-tac-toe, no strategy exists that can guarantee a win, but at least a strategy exists that can guarantee you don't lose.\"))), mdx(\"section\", {\n    \"name\": \"Implementation\",\n    \"depth\": 1\n  }, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Implementation\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For the Algorithms for model checking (2IMF35) course taught at the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.tue.nl/en/\"\n  }, \"TU/e\"), \", I created a simple model-checker from scratch. It was written in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/\"\n  }, \"TypeScript\"), \", and a surrounding website was build around it using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/\"\n  }, \"React\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.microsoft.com/en-us/fluentui#/\"\n  }, \"Fluent-UI\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://microsoft.github.io/monaco-editor/\"\n  }, \"Monaco\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The model-checker is presented as a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tarvk.github.io/model-checker/demo/build/\"\n  }, \"web-tool here\"), \", and the code can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/TarVK/model-checker\"\n  }, \"here\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Below is an image showing the results of model checking problem described in the previous section:\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"~/tic-tac-toe-verified.png\",\n    \"alt\": \"tic-tac-toe verified\"\n  })), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This model is too large to graphically visualize, but for smaller models the LTS can be viewed graphically:\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"~/modelCheckerGUI.png\",\n    \"alt\": \"graphical model checking\"\n  })), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The course requested us to verify mu-calculus formulas in the following format:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\",\n    \"metastring\": \"showHeader=false\",\n    \"showHeader\": \"false\"\n  }, \"f,g ::= false | true | (f && g) | (f || g) | [a]f | <a>f | mu X.f | nu X.f | X\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" ranges over all actions present in your LTS, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"X\"), \" ranges over all valid variable names.\\nHence there is no implication, brackets are fixed around conjunction and disjunction, and there are no action formulas. In order to fully comply with the assignment (and as a fun challenge) I added the syntax described previously on top of the base syntax, but perform model-checking only on formulas written in the base syntax. This advanced syntax turns out to not increase expressiveness of the formulas, but only helps to make them a bit smaller and or easier to read. Therefor my program is able to transform any formula written with the more advanced syntax into a formula written in this base syntax. These transformed formulas can be found under the stats tab when editing a formula:\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"~/baseFormula.png\",\n    \"alt\": \"Stats tab\"\n  })), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For example the formula:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\",\n    \"metastring\": \"title=o-has-non-losing-strategy\",\n    \"title\": \"o-has-non-losing-strategy\"\n  }, \"nu X. (\\n    !<x-won>true\\n    && [x0+x1+x2+x3+x4+x5+x6+x7+x8]X\\n    && (\\n        <o0+o1+o2+o3+o4+o5+o6+o7+o8>X\\n        || !<o0+o1+o2+o3+o4+o5+o6+o7+o8>true\\n    )\\n)\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Is transformed into this:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-txt\",\n    \"metastring\": \"title=o-has-non-losing-strategy_simplified\",\n    \"title\": \"o-has-non-losing-strategy_simplified\"\n  }, \"nu X. ([x-won]false && (([x0]X && ([x1]X && ([x2]X && ([x3]X && ([x4]X && ([x5]X && ([x6]X && ([x7]X && [x8]X)))))))) && ((<o0>X || (<o1>X || (<o2>X || (<o3>X || (<o4>X || (<o5>X || (<o6>X || (<o7>X || <o8>X)))))))) || ([o0]false && ([o1]false && ([o2]false && ([o3]false && ([o4]false && ([o5]false && ([o6]false && ([o7]false && [o8]false)))))))))))\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Due to lack of formatting and excessive brackets this formula is much harder to read currently, but besides this you can also clearly see that it has more characters in total. Certain families of formulas (depending on the LTS) will be exponentially larger in this simplified form. Semantically these formulas will always be entirely equivalent however, allowing us to do model-checking on this form instead.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The model-checker can both use a naive recursive algorithm to compute the set of states for which a formula is satisfied, and use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.win.tue.nl/~timw/teaching/amc/2008/week6.pdf\"\n  }, \"Emerson-lei algorithm\"), \" for this.\")), mdx(\"section\", {\n    \"name\": \"Parity game solving\",\n    \"depth\": 1\n  }, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Parity game solving\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Instead of using a simple recursive algorithm to compute the states that satisfy a formula, one can also solve a parity game. The concept of parity games is quite a few abstractions removed from the intuitive idea of model-checking, but is useful in practice.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To use parity games for model checking, the LTS and mu-calculus formula are first combined into a single \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.mcrl2.org/web/user_manual/language_reference/bes.html\"\n  }, \"Boolean Equation System (BES)\"), \". Each state in the LTS has a corresponding variable in the equation system such that given a solution to the equation system, we can also determine whether a given state satisfies the mu-calculus formula. Next, this BES can be translated to a parity game, such that the solution to the parity game trivially yields a solution to the BES as well.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Both BES and parity games have some freedom in how solutions are found, and hence heuristics can be used to speed up the process of model-checking.\"), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Parity games\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Parity games\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A minimum parity game is represented by a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/Graph_theory\"\n  }, \"graph\"), \", where each node has two attributes:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An owner: Either \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Even\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Odd\"), \" represented by a diamond and square shape respectively\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A priority: A number shown in the node itself\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Additionally, each node in the graph must have at least one outgoing edge for it to be a valid parity game.\\nWe may also show the identifier/name below the node, but this has no real effect on the game.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To play the game, a token is placed on one of the nodes. The owner of the node can decide to move the token to one of the successor nodes. Since each node has at least one outgoing edge this process can continue indefinitely. Because the parity game itself is only finite, this means that certain nodes must be visited infinitely often. Between all nodes that are visited infinitely often, we consider the one with the lowest priority. If this priority is even, player \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Even\"), \" wins the game, otherwise player \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Odd\"), \" wins the game.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For both player \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Even\"), \" and player \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Odd\"), \" an optimal strategy exists. A parity game solver can determine what player wins the game when the token starts in a certain node, assuming both players play optimally.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Parity game solver implementation\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Parity game solver implementation\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The second assignment for the Algorithms for model checking course asked us to implement the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.win.tue.nl/~timw/teaching/amc/2009/college14.pdf\"\n  }, \"Small Progress Measures Algorithm\"), \" to solve parity games.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This algorithm describes an approach that always results in a correct output. It however leaves open certain details which can greatly affect the speed of the algorithm in the real world. The algorithm tells us to \\\"Lift a node\\\" as long as there's a node for which lifting changes the state, without describing what node to lift when there are multiple nodes that can successfully be lifted. Nor does it describe how to find a node that can be lifted successfully. My implementation provides several approaches to pick such a node, in terms of the following attributes:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The base order to check nodes in\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A strategy of how to deviate from this base order\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Whether lifting should be grouped by priority\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"These attributes can be combined in different ways. Which approach is most effective depends on the parity game at hand. The default configuration which uses the graph ordering strategy and does not lift per priority seems most generally effective.\"), mdx(\"details\", null, mdx(\"summary\", null, \"Approach options\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Base orderings:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Input order: Follows the order in which the nodes are defined in the textual representation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Random order: Randomly shuffles the order of the nodes according to a fixed seed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Priority order: Sorts the nodes from highest to lowest priority\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Graph order: Sorts the nodes according to predecessor vertices, in an attempt to have more consecutive lifts enabled\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gain order: Sorts nodes in a lexicographical ordering of 3 aspects to maximize the possible gain to be made: odd priority first, odd owner first, lower priority first\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Strategies:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Direct cycle: Simply iteratively goes through the base order, until none of the nodes are successfully lifted\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Repeat nodes: Goes iteratively through the base order, but lifts each node repeatedly until it can no longer be lifted (handles self loops well)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adaptive ordering: Goes iteratively through the base order, but whenever lifting fails, the node is moved to the back of the list and the cycle restarts from the beginning of the list\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Graph ordering: Goes iteratively through the base order. Whenever lifting is successful, a breath for search is performed on all nodes that lift successfully using the predecessor relation. Whenever this search detects a cycle that was successfully lifted,this cycle repeats until it can no longer be lifted successfully\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Grouping:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No grouping: The selected strategy is applied on an ordering involving all nodes at once\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lift per priority: The graph is partitioned into clusters of the same priority, and the selected strategy and ordering is applied per cluster. The lifting happens from highest to lowest priority and loops around until no progress can be made anymore. Each cluster repeats lifting within its cluster, until no progress is made within the cluster anymore.\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The website for the first assignment was modified to also provide a visual interface for this project. This web-app can be accessed \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tarvk.github.io/parity-game-solver/demo/build\"\n  }, \"here\"), \", and the source code can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/TarVK/parity-game-solver\"\n  }, \"here\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Below is an image of the web-app:\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"~/parityGameSolver.png\",\n    \"alt\": \"parity-game-solver web-app\"\n  })))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#model-checker\" class=\"css-nn640c\"><h1>Model checker</h1></a><p>There are many things in the world that can be considered in terms of &quot;behavior&quot;: Software processes, business processes, board games, etcetera. This behavior can be formally described in many ways, one of which is the <a href=\"https://en.wikipedia.org/wiki/Transition_system\" class=\"css-0\">Labeled Transition System (LTS)</a>. Once behavior is formally modeled, desirable properties can also be modeled. <a href=\"https://en.wikipedia.org/wiki/Modal_%CE%BC-calculus\" class=\"css-0\">Modal mu calculus</a> is one such formalism to describe properties. The act of model checking is verifying whether these properties are met by the described behavior.</p><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#labeled-transition-systems\" class=\"css-nn640c\"><h2>Labeled Transition Systems</h2></a><p>A LTS formally consists of 3 parts:</p><ul><li>A set of nodes/states</li><li>A set of labels/actions</li><li>A transition relation mapping nodes to another using labels</li></ul><p>All these parts are commonly represented in a simple to understand drawing.\nConsider for instance a LTS consisting of:</p><ul><li>2 states: <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">0</code> and <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">1</code></li><li>One label: <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">a</code></li><li>One transition, connecting <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">0</code> to <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">1</code> by means of <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">a</code></li></ul><p>This LTS can be drawn as follows:</p><p><img alt=\"A simple LTS\" src=\"/pages/1-projects/Model-checker/LTSimage.png\" style=\"max-width:100%\"/></p><p>Usually an initial state is identified on the LTS, and for instance drawn with a thicker border like above. This LTS describes the behavior that a single <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">a</code> action can occur, and nothing else can happen afterwards.\nLTSes can describe infinite behavior, by means of loops. Consider for instance the following LTS:</p><p><img alt=\"A looping LTS\" src=\"/pages/1-projects/Model-checker/LTSimageLoop.png\" style=\"max-width:100%\"/></p><p>Here we start in state 0 again, and we can follow the transition arrows in a loop. Thus this behavior describes the infinite sequence of <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">a</code>, <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">b</code>, <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">c</code> being iterated.</p><p>Finally LTSes can describe non-deterministic behavior. In other words, we don&#x27;t know what will happen, multiple routes can be taken:</p><p><img alt=\"A looping LTS\" src=\"/pages/1-projects/Model-checker/LTSimageChoice.png\" style=\"max-width:100%\"/></p><p>These actions are rather abstract - and can represent almost anything depending on what you&#x27;re modelling, so we will have a look at an example to get a better intuition.</p><p>Also note that describing behavior with an LTS by hand is often a lot of effort since LTSes can become very large when encoding all possibilities. Certain behavior even requires infinitely large LTSes to fully describe the behavior.\nFor this reason most real world modelling systems use LTSes as an underlying mathematical model, but build a higher level and more user friendly modelling formalism on top of this. This model could then be translated to an (possibly infinite) LTS. One example of such a higher-level formalism is that of <a href=\"https://en.wikipedia.org/wiki/Petri_net\" class=\"css-0\">Petri nets</a>, and another is mCRL2&#x27;s <a href=\"https://www.mcrl2.org/web/user_manual/language_reference/process.html\" class=\"css-0\">process-algebra</a>.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#modal-mu-calculus\" class=\"css-nn640c\"><h2>Modal Mu-calculus</h2></a><p>When we have a model to be checked, modal mu-calculus (μ-calculus) formulas can be written and verified on the model.</p><p>One can create a formula according to the following CFG:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"showHeader=false\" class=\"css-1x06cmw\"><code class=\"language-txt undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span>f,g ::= false | true | (f) | !f | f &amp;&amp; g | f || g | f =&gt; g | [r]f | &lt;r&gt;f | mu X.f | nu X.f | X\n</span></span><span style=\"flex-wrap:wrap\">r,s ::= A | (r) | r + s | r . s | r* | r+\n</span><span style=\"flex-wrap:wrap\">A,B ::= false | true | a | (A) | !A | A &amp;&amp; B | A || B\n</span></code></div><p>Here <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">a</code> ranges over all actions present in your LTS, and <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">X</code> ranges over all valid variable names. Informally, the semantics of each of the base formula constructs can be explained in terms of (not) including a state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> of an LTS as follows:</p><ul><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">false</code>: never includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">true</code>: always includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">(f)</code>: includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f</code> includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">!f</code>: includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f</code> does <em>not</em> include state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f&nbsp;&#38;&#38;&nbsp;g</code>: includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f</code> includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> <em>and</em> <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">g</code> includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f&nbsp;||&nbsp;g</code>: includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f</code> includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> <em>or</em> <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">g</code> includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f&nbsp;=&#62;&nbsp;g</code>: includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> if whenever <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f</code> includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code>, <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">g</code> also includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">[r]f</code>: includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> if for every path according to <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r</code> from <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> to some state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">q</code>, <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f</code> includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">q</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">&#60;r&#62;f</code>: includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> if there exists some path according to <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r</code> from <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> to some state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">q</code> where <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f</code> includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">q</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">mu&nbsp;X.f</code>: includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> if formula <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code>, where only a finite sequence of <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">X</code> variables was used</li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">nu&nbsp;X.f</code>: includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> if formula <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">f</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code>, where possibly an <em>infinite</em> sequence of <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">X</code> variables is used</li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">X</code>: includes state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> if the fixed point (<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">mu</code> or <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">nu</code>) that binds the variable <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">X</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code></li></ul><p>Next we have to express what paths an expression <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r</code> represents. We informally define whether an expression <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r</code> includes path <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> for each construct:</p><ul><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">A</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> consists of a single action, which is contained in set <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">A</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">(r)</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r&nbsp;+&nbsp;s</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> or <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r&nbsp;.&nbsp;s</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r</code> includes a start sub-path of <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code>, and <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code> includes the remainder of the path of <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r*</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> can be split into <em>0</em> or more sub-paths that each are included in <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r+</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">p</code> can be split into <em>1</em> or more sub-paths that each are included in <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">r</code></li></ul><p>Finally we have to express whether an action <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code> is present in a set of actions:</p><ul><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">false</code>: never includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">true</code>: always includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code> (if it appears somewhere in the LTS)</li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">a</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac&nbsp;==&nbsp;a</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">(A)</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">A</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">!A</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">A</code> does not include <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">A&nbsp;&#38;&#38;&nbsp;B</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">A</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code> <em>and</em> <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">B</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code></li><li><style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">A&nbsp;||&nbsp;B</code>: includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code> if <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">A</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code> <em>or</em> <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">B</code> includes <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">ac</code></li></ul><p>Using this syntax we can express properties of the LTS rather concisely. For instance a formula describing that there exists a path of <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">a</code> and <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">b</code> transition labels leading to a state with only <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">c</code> transitions can be described as follows:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div class=\"css-1x06cmw\"><code class=\"language-text undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span>&lt;(a||b)*&gt;!&lt;!c&gt;true</span></span></code></div><p>This reads as: there exists a path of <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">a</code> or <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">b</code> transitions repeated 0 or more times to a state where there does not exist an outgoing transition that&#x27;s not a <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">c</code> transition to any other state.</p><p>A more extensive description of these formulas as well as more extensive formulas not supported by my model checker can be found <a href=\"https://www.mcrl2.org/web/user_manual/articles/basic_modelling.html#specifying-systems\" class=\"css-0\">here on mCRL2&#x27;s website</a>.</p></section></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#model-checking-example\" class=\"css-nn640c\"><h1>Model checking example</h1></a><p>Using model-checking, we can check whether the game of <a href=\"https://en.wikipedia.org/wiki/Tic-tac-toe\" class=\"css-0\">tic-tac-toe games</a> has a winning strategy. A winning strategy is strategy such that no matter what choices the opponent makes, you&#x27;re guaranteed to win (when playing according to the strategy).</p><p>Our model will have to describe all possible games of tic-tac-toe that can be played. Fortunately for us, tic-tac-toe is such a simple game that this is still quite computable.</p><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#generating-the-lts\" class=\"css-nn640c\"><h2>Generating the LTS</h2></a><p>Creating a LTS by hand is usually rather cumbersome, since they can easily become extremely large. We shall use some JavaScript code to generate a LTS representing all possible tic-tac-toe games.</p><p>In our code, we shall represent the game by a 9 value long list, containing either the token <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">&#34;o&#34;</code>, <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">&#34;x&#34;</code>, or <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">null</code>:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=&quot;emptyGame.js&quot;\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">&quot;emptyGame.js&quot;</div><div class=\"MuiBox-root jss1\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-js undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> emptyGame </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token\" style=\"color:#2B91AF\">Array</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">9</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">fill</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token null nil\" style=\"color:#0000ff\">null</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>The indices correspond to grid values as follows:</p><table><tr><td>0</td><td>1</td><td>2</td></tr><tr><td>3</td><td>4</td><td>5</td></tr><tr><td>6</td><td>7</td><td>8</td></tr></table><style>  table {\n        border-spacing: 0px;\n        border: 1px solid black;\n    }\n    td {\n        padding-left: 7px;\n        padding-right: 7px;\n        margin: 0px;\n    }\n    td + td {\n        border-left: 1px solid black;\n    }\n    tr + tr &gt; td {\n        border-top: 1px solid black;\n    }</style><p>Each of these states can also be encoded as a single number by representing each token with a digit, and giving each token its own index in base 3. We also add an extra dedicated state to represent the game being finished:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=gameIDs.js\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">gameIDs.js</div><div class=\"MuiBox-root jss2\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-js undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">stateID</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token parameter\">game</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    game</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">reduceRight</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">s</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> v</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> s </span><span class=\"token\" style=\"color:#393A34\">+</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span class=\"token null nil\" style=\"color:#0000ff\">null</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> x</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span><span> o</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">[</span><span>v</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">*</span><span> </span><span class=\"token\" style=\"color:#36acaa\">3</span><span> </span><span class=\"token\" style=\"color:#393A34\">**</span><span> i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> finishedID </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#36acaa\">3</span><span> </span><span class=\"token\" style=\"color:#393A34\">**</span><span> </span><span class=\"token\" style=\"color:#36acaa\">9</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Next we create some functions to retrieve the indices of remaining cells in which a player can still put their cross or nought, and a function to get a new game by putting a cross or nought at a given index:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=gameUpdating.js\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">gameUpdating.js</div><div class=\"MuiBox-root jss3\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-js undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">remaining</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token parameter\">game</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> game</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">flatMap</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">v</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>v </span><span class=\"token\" style=\"color:#393A34\">==</span><span> </span><span class=\"token null nil\" style=\"color:#0000ff\">null</span><span> </span><span class=\"token\" style=\"color:#393A34\">?</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>i</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">set</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">game</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> i</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token spread\" style=\"color:#393A34\">...</span><span>game</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">slice</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    player</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token spread\" style=\"color:#393A34\">...</span><span>game</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">slice</span><span class=\"token\" style=\"color:#393A34\">(</span><span>i </span><span class=\"token\" style=\"color:#393A34\">+</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Given a game state, we would also like to know whether either of the players have won. There are 3 different options we have to consider there:</p><ul><li>3 tokens of the same type in a row</li><li>3 tokens of the same type in a column</li><li>3 tokens of the same type on a diagonal\nWe can check this using the following code:</li></ul><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=winDetection.js\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">winDetection.js</div><div class=\"MuiBox-root jss4\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-js undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">getIndex</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">i</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> j</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> i </span><span class=\"token\" style=\"color:#393A34\">+</span><span> j </span><span class=\"token\" style=\"color:#393A34\">*</span><span> </span><span class=\"token\" style=\"color:#36acaa\">3</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">won</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">game</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">for</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#0000ff\">let</span><span> i </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">;</span><span> i </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span> </span><span class=\"token\" style=\"color:#36acaa\">3</span><span class=\"token\" style=\"color:#393A34\">;</span><span> i</span><span class=\"token\" style=\"color:#393A34\">++</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> wonColumn </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">every</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">j</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> game</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">getIndex</span><span class=\"token\" style=\"color:#393A34\">(</span><span>i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> j</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">==</span><span> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> wonRow </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">every</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">j</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> game</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">getIndex</span><span class=\"token\" style=\"color:#393A34\">(</span><span>j</span><span class=\"token\" style=\"color:#393A34\">,</span><span> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">==</span><span> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>wonColumn </span><span class=\"token\" style=\"color:#393A34\">||</span><span> wonRow</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#36acaa\">true</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> wonDiagonal1 </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">every</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">i</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> game</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">getIndex</span><span class=\"token\" style=\"color:#393A34\">(</span><span>i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">==</span><span> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> wonDiagonal2 </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">every</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token parameter\">i</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> game</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">getIndex</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">2</span><span> </span><span class=\"token\" style=\"color:#393A34\">-</span><span> i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">==</span><span> player\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> wonDiagonal1 </span><span class=\"token\" style=\"color:#393A34\">||</span><span> wonDiagonal2</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Finally we obtain all possible transitions from one state to another, starting at the state of an empty game. Each transition is encoded as a tuple: <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">[fromStateID,&nbsp;label,&nbsp;toStateID]</code>. Strings are used to label each transition, where <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x4</code> means the cross player placed an <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x</code> at index 4, and <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x-won</code> to represent player <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x</code> won. Similar labels exist for the other player, and all other indices. The resulting code looks as follows:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=getTransitions.js\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">getTransitions.js</div><div class=\"MuiBox-root jss5\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-js undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">opposite</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token parameter\">player</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>x</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;o&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> o</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;x&quot;</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">[</span><span>player</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> getTransitions </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">,</span><span> player</span><span class=\"token\" style=\"color:#393A34\">,</span><span> visited </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token\" style=\"color:#2B91AF\">Set</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span> out </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#36acaa\">ID</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">stateID</span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>visited</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">has</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">ID</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    visited</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">add</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">ID</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">won</span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;x&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span> out</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">push</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">ID</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;x-won&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> finishedID</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">else</span><span> </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">won</span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;o&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span> out</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">push</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">ID</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;o-won&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> finishedID</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">else</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">remaining</span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">forEach</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">i</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> newGame </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">set</span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">,</span><span> i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            out</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">push</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">ID</span><span class=\"token\" style=\"color:#393A34\">,</span><span> player </span><span class=\"token\" style=\"color:#393A34\">+</span><span> i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#393A34\">stateID</span><span class=\"token\" style=\"color:#393A34\">(</span><span>newGame</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">getTransitions</span><span class=\"token\" style=\"color:#393A34\">(</span><span>newGame</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#393A34\">opposite</span><span class=\"token\" style=\"color:#393A34\">(</span><span>player</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span> visited</span><span class=\"token\" style=\"color:#393A34\">,</span><span> out</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> out</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>These transitions can then be transformed into an LTS in <a href=\"https://www.mcrl2.org/web/user_manual/language_reference/lts.html#aldebaran-format\" class=\"css-0\">Aldebran format</a> which our model-checker can read in:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=getLTS.js\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">getLTS.js</div><div class=\"MuiBox-root jss6\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-js undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">getLTS</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token parameter\">transitions</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token template-string\" style=\"color:#A31515\">des(0, </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">transitions</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">.</span><span class=\"token template-string interpolation property-access\">length</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\">, </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">finishedID</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\">)\\n</span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span> </span><span class=\"token\" style=\"color:#393A34\">+</span><span>\n</span></span><span style=\"flex-wrap:wrap\">    transitions\n</span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">map</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\" style=\"color:#393A34\">[</span><span class=\"token parameter module\" style=\"color:#0000ff\">from</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> action</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> to</span><span class=\"token parameter\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token template-string\" style=\"color:#A31515\">(</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation module\" style=\"color:#0000ff\">from</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\">, &quot;</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">action</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\">&quot;, </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">to</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\">)</span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">join</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;\\n&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">copy</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">getLTS</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">getTransitions</span><span class=\"token\" style=\"color:#393A34\">(</span><span>emptyGame</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;x&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Now executing this code stores a LTS in our clipboard, representing all possible tic-tac-toe games in which cross plays first. Below is the code as a whole:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=generateTicTacToeLTS.js spoiler=true\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">generateTicTacToeLTS.js</div><div class=\"MuiBox-root jss7\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><details><summary class=\"css-1iuj5ih\">View code</summary> <code class=\"language-js undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> emptyGame </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token\" style=\"color:#2B91AF\">Array</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">9</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">fill</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token null nil\" style=\"color:#0000ff\">null</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">stateID</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token parameter\">game</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    game</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">reduceRight</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">s</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> v</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> s </span><span class=\"token\" style=\"color:#393A34\">+</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span class=\"token null nil\" style=\"color:#0000ff\">null</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> x</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span><span> o</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">[</span><span>v</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">*</span><span> </span><span class=\"token\" style=\"color:#36acaa\">3</span><span> </span><span class=\"token\" style=\"color:#393A34\">**</span><span> i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> finishedID </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#36acaa\">3</span><span> </span><span class=\"token\" style=\"color:#393A34\">**</span><span> </span><span class=\"token\" style=\"color:#36acaa\">9</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">remaining</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token parameter\">game</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> game</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">flatMap</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">v</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>v </span><span class=\"token\" style=\"color:#393A34\">==</span><span> </span><span class=\"token null nil\" style=\"color:#0000ff\">null</span><span> </span><span class=\"token\" style=\"color:#393A34\">?</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>i</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">set</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">game</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> i</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token spread\" style=\"color:#393A34\">...</span><span>game</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">slice</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    player</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token spread\" style=\"color:#393A34\">...</span><span>game</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">slice</span><span class=\"token\" style=\"color:#393A34\">(</span><span>i </span><span class=\"token\" style=\"color:#393A34\">+</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">getIndex</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">i</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> j</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> i </span><span class=\"token\" style=\"color:#393A34\">+</span><span> j </span><span class=\"token\" style=\"color:#393A34\">*</span><span> </span><span class=\"token\" style=\"color:#36acaa\">3</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">won</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">game</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">for</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#0000ff\">let</span><span> i </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">;</span><span> i </span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span> </span><span class=\"token\" style=\"color:#36acaa\">3</span><span class=\"token\" style=\"color:#393A34\">;</span><span> i</span><span class=\"token\" style=\"color:#393A34\">++</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> wonColumn </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">every</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">j</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> game</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">getIndex</span><span class=\"token\" style=\"color:#393A34\">(</span><span>i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> j</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">==</span><span> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> wonRow </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">every</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">j</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> game</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">getIndex</span><span class=\"token\" style=\"color:#393A34\">(</span><span>j</span><span class=\"token\" style=\"color:#393A34\">,</span><span> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">==</span><span> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>wonColumn </span><span class=\"token\" style=\"color:#393A34\">||</span><span> wonRow</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#36acaa\">true</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> wonDiagonal1 </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">every</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">i</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> game</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">getIndex</span><span class=\"token\" style=\"color:#393A34\">(</span><span>i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">==</span><span> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> wonDiagonal2 </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">2</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">every</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token parameter\">i</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> game</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">getIndex</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">2</span><span> </span><span class=\"token\" style=\"color:#393A34\">-</span><span> i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> i</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">==</span><span> player\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> wonDiagonal1 </span><span class=\"token\" style=\"color:#393A34\">||</span><span> wonDiagonal2</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">opposite</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token parameter\">player</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>x</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;o&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> o</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;x&quot;</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">[</span><span>player</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> getTransitions </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">,</span><span> player</span><span class=\"token\" style=\"color:#393A34\">,</span><span> visited </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token\" style=\"color:#2B91AF\">Set</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span> out </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#36acaa\">ID</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">stateID</span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>visited</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">has</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">ID</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    visited</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">add</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">ID</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">won</span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;x&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span> out</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">push</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">ID</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;x-won&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> finishedID</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">else</span><span> </span><span class=\"token control-flow\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">won</span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;o&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span> out</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">push</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">ID</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;o-won&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> finishedID</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">else</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">remaining</span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">forEach</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">i</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> newGame </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">set</span><span class=\"token\" style=\"color:#393A34\">(</span><span>game</span><span class=\"token\" style=\"color:#393A34\">,</span><span> i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> player</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            out</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">push</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">ID</span><span class=\"token\" style=\"color:#393A34\">,</span><span> player </span><span class=\"token\" style=\"color:#393A34\">+</span><span> i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#393A34\">stateID</span><span class=\"token\" style=\"color:#393A34\">(</span><span>newGame</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">getTransitions</span><span class=\"token\" style=\"color:#393A34\">(</span><span>newGame</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#393A34\">opposite</span><span class=\"token\" style=\"color:#393A34\">(</span><span>player</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span> visited</span><span class=\"token\" style=\"color:#393A34\">,</span><span> out</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token control-flow\" style=\"color:#0000ff\">return</span><span> out</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">getLTS</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token parameter\">transitions</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token template-string\" style=\"color:#A31515\">des(0, </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">transitions</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">.</span><span class=\"token template-string interpolation property-access\">length</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\">, </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">finishedID</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\">)\\n</span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span> </span><span class=\"token\" style=\"color:#393A34\">+</span><span>\n</span></span><span style=\"flex-wrap:wrap\">    transitions\n</span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">map</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\" style=\"color:#393A34\">[</span><span class=\"token parameter module\" style=\"color:#0000ff\">from</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> action</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> to</span><span class=\"token parameter\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token template-string\" style=\"color:#A31515\">(</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation module\" style=\"color:#0000ff\">from</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\">, &quot;</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">action</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\">&quot;, </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">to</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\">)</span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">join</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;\\n&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">copy</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">getLTS</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">getTransitions</span><span class=\"token\" style=\"color:#393A34\">(</span><span>emptyGame</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;x&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></details></div><p>The output of the code can be found <a href=\"/pages/1-projects/Model-checker/ticTacToe.txt\" class=\"css-0\">here</a>, but you can also execute it in your browser&#x27;s JavaScript console.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#verifying-formulas\" class=\"css-nn640c\"><h2>Verifying formulas</h2></a><p>We can now use mu-calculus to ask questions about our model. The model encodes that cross always makes the first move. It would be interesting to know whether nought can win at all if cross begins. You probably already knows this is definitely possible, but we can also verify this formally with our model.</p><p>We use the minimal fixed point operator mu, which essentially allows us to define a recursive formula. We shall let <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">X</code> represent the states in which player nought can win. We say that player nought can win the game either if:</p><ul><li>There exists a <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">o-won</code> transition (remember that&#x27;s how we encoded a winning state in our model)</li><li>There exists a transition of a move made by cross (<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x0</code>-<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x8</code>) to a state where nought can win</li><li>There exists a transition of a move made by nought (<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">o0</code>-<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">o8</code>) to a state where nought can win</li></ul><p>All with all, the formula is expressed as follows:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=o-can-win\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">o-can-win</div><div class=\"MuiBox-root jss8\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-txt undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span>mu X. (\n</span></span><span style=\"flex-wrap:wrap\">    &lt;o-won&gt;true\n</span><span style=\"flex-wrap:wrap\">    || &lt;x0+x1+x2+x3+x4+x5+x6+x7+x8&gt;X\n</span><span style=\"flex-wrap:wrap\">    || &lt;o0+o1+o2+o3+o4+o5+o6+o7+o8&gt;X\n</span><span style=\"flex-wrap:wrap\">)\n</span></code></div><p>When running this in a model-checker, we will see that the formula is satisfied by the LTS, and hence player nought can indeed win.</p><p>Now we would like to know whether nought also have a strategy that ensures they win. We can transform our previous formula to represent this, by replacing the statement:</p><ul><li>There exists a transition of a move made by cross (<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x0</code>-<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x8</code>) to a state where nought can win</li></ul><p>By the following statement:</p><ul><li>For all transitions of a move made by cross (<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x0</code>-<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x8</code>) to a state <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code>, nought can win <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">s</code></li></ul><p>We have to be careful here though, because nought and cross alternate in making moves. Hence for some states cross has no transitions at all, in which case this condition is trivially met. If cross has no transitions, then for all transitions it does have (none) nought can win. Hence we have to additionally add the following condition to this:</p><ul><li>And cross has at least a single transition of a move they can make (<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x0</code>-<style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x8</code>)</li></ul><p>The formula representing this looks as follows:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=o-has-winning-strategy\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">o-has-winning-strategy</div><div class=\"MuiBox-root jss9\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-txt undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span>mu X. (\n</span></span><span style=\"flex-wrap:wrap\">    &lt;o-won&gt;true\n</span><span style=\"flex-wrap:wrap\">    || (\n</span><span style=\"flex-wrap:wrap\">        &lt;x0+x1+x2+x3+x4+x5+x6+x7+x8&gt;true\n</span><span style=\"flex-wrap:wrap\">        &amp;&amp; [x0+x1+x2+x3+x4+x5+x6+x7+x8]X\n</span><span style=\"flex-wrap:wrap\">    )\n</span><span style=\"flex-wrap:wrap\">    || &lt;o0+o1+o2+o3+o4+o5+o6+o7+o8&gt;X\n</span><span style=\"flex-wrap:wrap\">)\n</span></code></div><p>Trying to verify this in any model checker will now tell us that this formula is not satisfied by the model. Hence nought has no winning strategy for the game if cross makes the first move.</p><p>Symmetrically we can check whether cross has a winning strategy in that case:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=x-has-winning-strategy\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">x-has-winning-strategy</div><div class=\"MuiBox-root jss10\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-txt undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span>mu X. (\n</span></span><span style=\"flex-wrap:wrap\">    &lt;x-won&gt;true\n</span><span style=\"flex-wrap:wrap\">    || (\n</span><span style=\"flex-wrap:wrap\">        &lt;o0+o1+o2+o3+o4+o5+o6+o7+o8&gt;true\n</span><span style=\"flex-wrap:wrap\">        &amp;&amp; [o0+o1+o2+o3+o4+o5+o6+o7+o8]X\n</span><span style=\"flex-wrap:wrap\">    )\n</span><span style=\"flex-wrap:wrap\">    || &lt;x0+x1+x2+x3+x4+x5+x6+x7+x8&gt;X\n</span><span style=\"flex-wrap:wrap\">)\n</span></code></div><p>This property is however also not met. Neither cross or nought has a strategy that guarantees they win.</p><p>Logically, this must then mean that if neither cross nor nought can force a win, they must both be able to at least force a draw. I.e. there should exist a strategy that guarantees that the player does not lose.</p><p>We can check whether nought has such a strategy with a formula constructed using the maximal fixed point operator nu. The construction is quite similar to our previous one. <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">X</code> represents the states in which there is a strategy to not lose, it consists of 3 parts:</p><ul><li>There does not exist <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">x-won</code> transition from this state</li><li>And for all moves cross can make, nought has a non-losing strategy</li><li>And there exists a move nought can make to a state in which they have a non-losing strategy, or nought can&#x27;t make a move at all in this state</li></ul><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=o-has-non-losing-strategy\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">o-has-non-losing-strategy</div><div class=\"MuiBox-root jss11\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-txt undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span>nu X. (\n</span></span><span style=\"flex-wrap:wrap\">    !&lt;x-won&gt;true\n</span><span style=\"flex-wrap:wrap\">    &amp;&amp; [x0+x1+x2+x3+x4+x5+x6+x7+x8]X\n</span><span style=\"flex-wrap:wrap\">    &amp;&amp; (\n</span><span style=\"flex-wrap:wrap\">        &lt;o0+o1+o2+o3+o4+o5+o6+o7+o8&gt;X\n</span><span style=\"flex-wrap:wrap\">        || !&lt;o0+o1+o2+o3+o4+o5+o6+o7+o8&gt;true\n</span><span style=\"flex-wrap:wrap\">    )\n</span><span style=\"flex-wrap:wrap\">)\n</span></code></div><p>A model-checker will tell us that this property is indeed met by the model, and the symmetric property of cross having a non-losing strategy is also met:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=x-has-non-losing-strategy\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">x-has-non-losing-strategy</div><div class=\"MuiBox-root jss12\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-txt undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span>nu X. (\n</span></span><span style=\"flex-wrap:wrap\">    !&lt;o-won&gt;true\n</span><span style=\"flex-wrap:wrap\">    &amp;&amp; [o0+o1+o2+o3+o4+o5+o6+o7+o8]X\n</span><span style=\"flex-wrap:wrap\">    &amp;&amp; (\n</span><span style=\"flex-wrap:wrap\">        &lt;x0+x1+x2+x3+x4+x5+x6+x7+x8&gt;X\n</span><span style=\"flex-wrap:wrap\">        || !&lt;x0+x1+x2+x3+x4+x5+x6+x7+x8&gt;true\n</span><span style=\"flex-wrap:wrap\">    )\n</span><span style=\"flex-wrap:wrap\">)\n</span></code></div><p>Hence in the game of tic-tac-toe, no strategy exists that can guarantee a win, but at least a strategy exists that can guarantee you don&#x27;t lose.</p></section></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#implementation\" class=\"css-nn640c\"><h1>Implementation</h1></a><p>For the Algorithms for model checking (2IMF35) course taught at the <a href=\"https://www.tue.nl/en/\" class=\"css-0\">TU/e</a>, I created a simple model-checker from scratch. It was written in <a href=\"https://www.typescriptlang.org/\" class=\"css-0\">TypeScript</a>, and a surrounding website was build around it using <a href=\"https://reactjs.org/\" class=\"css-0\">React</a>, <a href=\"https://developer.microsoft.com/en-us/fluentui#/\" class=\"css-0\">Fluent-UI</a> and <a href=\"https://microsoft.github.io/monaco-editor/\" class=\"css-0\">Monaco</a>.</p><p>The model-checker is presented as a <a href=\"https://tarvk.github.io/model-checker/demo/build/\" class=\"css-0\">web-tool here</a>, and the code can be found <a href=\"https://github.com/TarVK/model-checker\" class=\"css-0\">here</a>.</p><p>Below is an image showing the results of model checking problem described in the previous section:\n<img alt=\"tic-tac-toe verified\" src=\"/pages/1-projects/Model-checker/tic-tac-toe-verified.png\" style=\"max-width:100%\"/></p><p>This model is too large to graphically visualize, but for smaller models the LTS can be viewed graphically:\n<img alt=\"graphical model checking\" src=\"/pages/1-projects/Model-checker/modelCheckerGUI.png\" style=\"max-width:100%\"/></p><p>The course requested us to verify mu-calculus formulas in the following format:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"showHeader=false\" class=\"css-1x06cmw\"><code class=\"language-txt undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span>f,g ::= false | true | (f &amp;&amp; g) | (f || g) | [a]f | &lt;a&gt;f | mu X.f | nu X.f | X</span></span></code></div><p>Here <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">a</code> ranges over all actions present in your LTS, and <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">X</code> ranges over all valid variable names.\nHence there is no implication, brackets are fixed around conjunction and disjunction, and there are no action formulas. In order to fully comply with the assignment (and as a fun challenge) I added the syntax described previously on top of the base syntax, but perform model-checking only on formulas written in the base syntax. This advanced syntax turns out to not increase expressiveness of the formulas, but only helps to make them a bit smaller and or easier to read. Therefor my program is able to transform any formula written with the more advanced syntax into a formula written in this base syntax. These transformed formulas can be found under the stats tab when editing a formula:\n<img alt=\"Stats tab\" src=\"/pages/1-projects/Model-checker/baseFormula.png\" style=\"max-width:100%\"/></p><p>For example the formula:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=o-has-non-losing-strategy\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">o-has-non-losing-strategy</div><div class=\"MuiBox-root jss13\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-txt undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span>nu X. (\n</span></span><span style=\"flex-wrap:wrap\">    !&lt;x-won&gt;true\n</span><span style=\"flex-wrap:wrap\">    &amp;&amp; [x0+x1+x2+x3+x4+x5+x6+x7+x8]X\n</span><span style=\"flex-wrap:wrap\">    &amp;&amp; (\n</span><span style=\"flex-wrap:wrap\">        &lt;o0+o1+o2+o3+o4+o5+o6+o7+o8&gt;X\n</span><span style=\"flex-wrap:wrap\">        || !&lt;o0+o1+o2+o3+o4+o5+o6+o7+o8&gt;true\n</span><span style=\"flex-wrap:wrap\">    )\n</span><span style=\"flex-wrap:wrap\">)\n</span></code></div><p>Is transformed into this:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=o-has-non-losing-strategy_simplified\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">o-has-non-losing-strategy_simplified</div><div class=\"MuiBox-root jss14\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-txt undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span>nu X. ([x-won]false &amp;&amp; (([x0]X &amp;&amp; ([x1]X &amp;&amp; ([x2]X &amp;&amp; ([x3]X &amp;&amp; ([x4]X &amp;&amp; ([x5]X &amp;&amp; ([x6]X &amp;&amp; ([x7]X &amp;&amp; [x8]X)))))))) &amp;&amp; ((&lt;o0&gt;X || (&lt;o1&gt;X || (&lt;o2&gt;X || (&lt;o3&gt;X || (&lt;o4&gt;X || (&lt;o5&gt;X || (&lt;o6&gt;X || (&lt;o7&gt;X || &lt;o8&gt;X)))))))) || ([o0]false &amp;&amp; ([o1]false &amp;&amp; ([o2]false &amp;&amp; ([o3]false &amp;&amp; ([o4]false &amp;&amp; ([o5]false &amp;&amp; ([o6]false &amp;&amp; ([o7]false &amp;&amp; [o8]false)))))))))))</span></span></code></div><p>Due to lack of formatting and excessive brackets this formula is much harder to read currently, but besides this you can also clearly see that it has more characters in total. Certain families of formulas (depending on the LTS) will be exponentially larger in this simplified form. Semantically these formulas will always be entirely equivalent however, allowing us to do model-checking on this form instead.</p><p>The model-checker can both use a naive recursive algorithm to compute the set of states for which a formula is satisfied, and use the <a href=\"https://www.win.tue.nl/~timw/teaching/amc/2008/week6.pdf\" class=\"css-0\">Emerson-lei algorithm</a> for this.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#parity-game-solving\" class=\"css-nn640c\"><h1>Parity game solving</h1></a><p>Instead of using a simple recursive algorithm to compute the states that satisfy a formula, one can also solve a parity game. The concept of parity games is quite a few abstractions removed from the intuitive idea of model-checking, but is useful in practice.</p><p>To use parity games for model checking, the LTS and mu-calculus formula are first combined into a single <a href=\"https://www.mcrl2.org/web/user_manual/language_reference/bes.html\" class=\"css-0\">Boolean Equation System (BES)</a>. Each state in the LTS has a corresponding variable in the equation system such that given a solution to the equation system, we can also determine whether a given state satisfies the mu-calculus formula. Next, this BES can be translated to a parity game, such that the solution to the parity game trivially yields a solution to the BES as well.</p><p>Both BES and parity games have some freedom in how solutions are found, and hence heuristics can be used to speed up the process of model-checking.</p><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#parity-games\" class=\"css-nn640c\"><h2>Parity games</h2></a><p>A minimum parity game is represented by a <a href=\"https://en.wikipedia.org/wiki/Graph_theory\" class=\"css-0\">graph</a>, where each node has two attributes:</p><ul><li>An owner: Either <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Even</code> or <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Odd</code> represented by a diamond and square shape respectively</li><li>A priority: A number shown in the node itself</li></ul><p>Additionally, each node in the graph must have at least one outgoing edge for it to be a valid parity game.\nWe may also show the identifier/name below the node, but this has no real effect on the game.</p><p>To play the game, a token is placed on one of the nodes. The owner of the node can decide to move the token to one of the successor nodes. Since each node has at least one outgoing edge this process can continue indefinitely. Because the parity game itself is only finite, this means that certain nodes must be visited infinitely often. Between all nodes that are visited infinitely often, we consider the one with the lowest priority. If this priority is even, player <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Even</code> wins the game, otherwise player <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Odd</code> wins the game.</p><p>For both player <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Even</code> and player <style data-emotion=\"css 1ofz18t\">.css-1ofz18t{display:inline-block;background-color:#f6f6f6;border-radius:5px;word-break:break-word;}</style><code class=\"css-1ofz18t\">Odd</code> an optimal strategy exists. A parity game solver can determine what player wins the game when the token starts in a certain node, assuming both players play optimally.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#parity-game-solver-implementation\" class=\"css-nn640c\"><h2>Parity game solver implementation</h2></a><p>The second assignment for the Algorithms for model checking course asked us to implement the <a href=\"https://www.win.tue.nl/~timw/teaching/amc/2009/college14.pdf\" class=\"css-0\">Small Progress Measures Algorithm</a> to solve parity games.</p><p>This algorithm describes an approach that always results in a correct output. It however leaves open certain details which can greatly affect the speed of the algorithm in the real world. The algorithm tells us to &quot;Lift a node&quot; as long as there&#x27;s a node for which lifting changes the state, without describing what node to lift when there are multiple nodes that can successfully be lifted. Nor does it describe how to find a node that can be lifted successfully. My implementation provides several approaches to pick such a node, in terms of the following attributes:</p><ul><li>The base order to check nodes in</li><li>A strategy of how to deviate from this base order</li><li>Whether lifting should be grouped by priority</li></ul><p>These attributes can be combined in different ways. Which approach is most effective depends on the parity game at hand. The default configuration which uses the graph ordering strategy and does not lift per priority seems most generally effective.</p><details><summary>Approach options</summary><p>Base orderings:</p><ul><li>Input order: Follows the order in which the nodes are defined in the textual representation</li><li>Random order: Randomly shuffles the order of the nodes according to a fixed seed</li><li>Priority order: Sorts the nodes from highest to lowest priority</li><li>Graph order: Sorts the nodes according to predecessor vertices, in an attempt to have more consecutive lifts enabled</li><li>Gain order: Sorts nodes in a lexicographical ordering of 3 aspects to maximize the possible gain to be made: odd priority first, odd owner first, lower priority first</li></ul><p>Strategies:</p><ul><li>Direct cycle: Simply iteratively goes through the base order, until none of the nodes are successfully lifted</li><li>Repeat nodes: Goes iteratively through the base order, but lifts each node repeatedly until it can no longer be lifted (handles self loops well)</li><li>Adaptive ordering: Goes iteratively through the base order, but whenever lifting fails, the node is moved to the back of the list and the cycle restarts from the beginning of the list</li><li>Graph ordering: Goes iteratively through the base order. Whenever lifting is successful, a breath for search is performed on all nodes that lift successfully using the predecessor relation. Whenever this search detects a cycle that was successfully lifted,this cycle repeats until it can no longer be lifted successfully</li></ul><p>Grouping:</p><ul><li>No grouping: The selected strategy is applied on an ordering involving all nodes at once</li><li>Lift per priority: The graph is partitioned into clusters of the same priority, and the selected strategy and ordering is applied per cluster. The lifting happens from highest to lowest priority and loops around until no progress can be made anymore. Each cluster repeats lifting within its cluster, until no progress is made within the cluster anymore.</li></ul></details><p>The website for the first assignment was modified to also provide a visual interface for this project. This web-app can be accessed <a href=\"https://tarvk.github.io/parity-game-solver/demo/build\" class=\"css-0\">here</a>, and the source code can be found <a href=\"https://github.com/TarVK/parity-game-solver\" class=\"css-0\">here</a>.</p><p>Below is an image of the web-app:\n<img alt=\"parity-game-solver web-app\" src=\"/pages/1-projects/Model-checker/parityGameSolver.png\" style=\"max-width:100%\"/></p></section></section>","scope":{}},"urlBase":"/pages/1-projects/Model-checker","ToC":[{"name":"Model checker","children":[{"name":"Labeled Transition Systems","children":[]},{"name":"Modal Mu-calculus","children":[]}]},{"name":"Model checking example","children":[{"name":"Generating the LTS","children":[]},{"name":"Verifying formulas","children":[]}]},{"name":"Implementation","children":[]},{"name":"Parity game solving","children":[{"name":"Parity games","children":[]},{"name":"Parity game solver implementation","children":[]}]}],"shareData":{"title":"Model checker","description":"Implementations of common model checking algorithms","tags":["model checker","model","checker","parity","game","solver","labeled","transition","system","LTS"]},"links":[{"type":"github","text":"Github model checker","url":"https://github.com/TarVK/model-checker"},{"type":"demo","text":"Demo model checker","url":"https://tarvk.github.io/model-checker/demo/build/"},{"type":"github","text":"Github PG solver","url":"https://github.com/TarVK/parity-game-solver"},{"type":"demo","text":"Demo PG solver","url":"https://tarvk.github.io/parity-game-solver/demo/build/"}],"index":{"rootPath":"","items":[{"name":"projects","orderIndex":1,"opened":true,"hasIndex":false,"children":[{"name":"Faces-in-plane","opened":false,"hasIndex":true,"children":[]},{"name":"LaunchMenu","opened":false,"hasIndex":true,"children":[]},{"name":"Mechanical-computer","opened":false,"hasIndex":true,"children":[]},{"name":"Model-checker","opened":false,"hasIndex":true,"children":[],"selected":true},{"name":"Model-React","opened":false,"hasIndex":true,"children":[]},{"name":"SAT","opened":false,"hasIndex":true,"children":[]},{"name":"Simulations","opened":false,"hasIndex":true,"children":[]},{"name":"Sweeper","opened":false,"hasIndex":true,"children":[]},{"name":"Waddles","opened":false,"hasIndex":true,"children":[]},{"name":"Hidden-blade","orderIndex":100,"opened":false,"hasIndex":true,"children":[]}]},{"name":"articles","orderIndex":2,"opened":false,"hasIndex":false,"children":[{"name":"Lambda-calculus","opened":false,"hasIndex":true,"children":[]}]},{"name":"hobbies","orderIndex":3,"opened":false,"hasIndex":false,"children":[{"name":"3D-modelling","opened":false,"hasIndex":true,"children":[]},{"name":"Freeskating","opened":false,"hasIndex":true,"children":[]},{"name":"juggling","opened":false,"hasIndex":true,"children":[]},{"name":"Kendama","opened":false,"hasIndex":true,"children":[]},{"name":"Longboarding","opened":false,"hasIndex":true,"children":[]},{"name":"parkour","opened":false,"hasIndex":true,"children":[]},{"name":"Spinning","opened":false,"hasIndex":true,"children":[]}]}]}},"__N_SSG":true}